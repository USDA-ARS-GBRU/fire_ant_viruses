%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: UTF8
%%Title: Iflaviridae2.pdf
%%Creator: (Adobe Acrobat 19.8.0)
%%For: rivers
%%CreationDate: 11/20/18, 11:18 AM
%%BoundingBox: 0 0 432 576
%%HiResBoundingBox: 0 0 432 576
%%CropBox: 0 0 432 576
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_AGM_Core/driver_media_override gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 999 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 91.163280, 2018/06/22-11:31:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreateDate="2018-11-20T16:03:44Z"
   xmp:CreatorTool="Preview"
   xmp:ModifyDate="2018-11-20T11:06:58-05:00"
   xmp:MetadataDate="2018-11-20T11:06:58-05:00"
   pdf:Keywords=""
   pdf:Producer="macOS Version 10.14.1 (Build 18B75) Quartz PDFContext"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:8beac26d-9b5e-7c42-a209-6d0c3b33ae15"
   xmpMM:InstanceID="uuid:3da9284e-5fbd-964c-9417-05526da284b4">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Iflaviridae.pdf</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -576 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 576 li
432 576 li
432 0 li
cp
clp
gsave
0 105.231 mo
426.47 105.231 li
426.47 473.081 li
0 473.081 li
0 105.231 li
cp
eclp
gsave
0 470.769 mo
432 470.769 li
432 105.231 li
0 105.231 li
cp
clp
.996923 lw
0 lc
2 lj
10 ml
[] 0 dsh
true sadj
5.48308 133.768 mo
5.48308 227.136 li
false sop
.75021 .679683 .670222 .90164 cmyk
@
[.996923 1.99385 ] 0 dsh
.996923 180.452 mo
4.98462 180.452 li
.516472 .431495 .431495 .0754711 cmyk
@
[] 0 dsh
.996923 180.452 mo
cp
.75021 .679683 .670222 .90164 cmyk
@
.269749 1 1 .319921 cmyk
%ADOBeginSubsetFont: JAAAAA+ArialMT-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.%%DocumentNeededResources: ProcSet (CIDInit)%%IncludeResource: ProcSet (CIDInit)%%BeginResource: CIDFont (JAAAAA+ArialMT)%%Title: (JAAAAA+ArialMT Adobe Identity 0)%%Version: 0/CIDInit /ProcSet findresource begin14 dict begin/CIDFontName /JAAAAA+ArialMT def/CIDFontType 0 def/CIDSystemInfo 3 dict dup begin/Registry (Adobe) def/Ordering (Identity) def/Supplement 0 defend def/FontBBox {13 -13 625 719} def/FontInfo 4 dict dup begin/FSType 8 defend def/CIDMapOffset 57 def/FDBytes 1 def/GDBytes 1 def/CIDCount 10 def/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def/FDArray 1 arraydup 0%ADOBeginFontDict4 dict dup begin/FontType 1 def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def%ADOBeginPrivateDict/Private 7 dict dup begin/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/SubrMapOffset 0 def/SDBytes 1 def/SubrCount 5 defend def%ADOEndPrivateDictend put%ADOEndFontDictdef/GlyphDirectory 2 dict defct_GlyphDirProcs beginGlyphDirectory+0 <001C60D8A8C9B6E3FA5101D97F0BCF44F7161DEB1E2A84766DD477E7C8A936AA182F5809A9> |1 <001C60D8A8C9B790A84EF3BFEAA3979E2D2B83FB38261E066FD4E610A60C2657F464457C41EE7EF3C5A1F657124CE9D2C256D696FC> |!endct_AddStdCIDMap%%EndResourcect_restoreCIDInit /JAAAAA+ArialMT-Identity-H /Identity-H 0 [/JAAAAA+ArialMT] ct_ComposeFont pop end end
%ADOEndSubsetFont
/GTMNCP+ArialMT /JAAAAA+ArialMT-Identity-H findfont ct_VMDictPutGTMNCP+ArialMT [7.97538 0 0 -7.97538 0 0 ]msf.996923 188.162 mo(\000\001)sh19.44 118.191 mo
19.44 150.342 li
.75021 .679683 .670222 .90164 cmyk
@
[.996923 1.99385 ] 0 dsh
16.1638 134.266 mo
18.9415 134.266 li
.516472 .431495 .431495 .0754711 cmyk
@
[] 0 dsh
5.98154 134.266 mo
16.1638 134.266 li
.75021 .679683 .670222 .90164 cmyk
@
.269749 1 1 .319921 cmyk
%ADOBeginSubsetFont: JAAAAA+ArialMT-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.ct_GlyphDirProcs begin/JAAAAA+ArialMT 1 GetGlyphDirectory2 <001C60D8A8C9B790A8417CB315BEA6378C40B4DBDDCE65AE1EF2F2DC311A485B3731FBDA67810487ECFF2B379DF3685C4C01DA6B774F54725985991BA8EE2887AF3E4669570A5C6B58B26AA7A112AD3388ABAFFFB7163E4DFB938DC6F2B038AD70DB6B94B44E8274349AF5CEE28707FF44A56104A8E206FD40ABF42EF1CEF8822AA65CFD012D3378B8F77A1F3468D0F5EC452D0049E7E41193C981BFEF733DB45C01AD9DF2> |!endend end
%ADOEndSubsetFont
GTMNCP+ArialMT [7.97538 0 0 -7.97538 0 0 ]msf5.98154 141.977 mo(\000\001)sh10.4054 141.977 mo(\000\002)sh14.8292 141.977 mo(\000\002)sh97.7279 110.714 mo
97.7279 126.665 li
.75021 .679683 .670222 .90164 cmyk
@
[.996923 1.99385 ] 0 dsh
98.2264 118.689 mo
97.2295 118.689 li
.516472 .431495 .431495 .0754711 cmyk
@
[] 0 dsh
19.9385 118.689 mo
98.2264 118.689 li
.75021 .679683 .670222 .90164 cmyk
@
.269749 1 1 .319921 cmyk
GTMNCP+ArialMT [7.97538 0 0 -7.97538 0 0 ]msf84.2695 126.4 mo(\000\001)sh88.6933 126.4 mo(\000\002)sh93.1172 126.4 mo(\000\002)sh[.996923 1.99385 ] 0 dsh
164.679 111.212 mo
cp
.516472 .431495 .431495 .0754711 cmyk
@
[] 0 dsh
98.2264 111.212 mo
164.679 111.212 li
.75021 .679683 .670222 .90164 cmyk
@
.516472 .431495 .431495 .0754711 cmyk
%ADOBeginSubsetFont: KAAAAA+Verdana-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.%%DocumentNeededResources: ProcSet (CIDInit)%%IncludeResource: ProcSet (CIDInit)%%BeginResource: CIDFont (KAAAAA+Verdana)%%Title: (KAAAAA+Verdana Adobe Identity 0)%%Version: 0/CIDInit /ProcSet findresource begin14 dict begin/CIDFontName /KAAAAA+Verdana def/CIDFontType 0 def/CIDSystemInfo 3 dict dup begin/Registry (Adobe) def/Ordering (Identity) def/Supplement 0 defend def/FontBBox {0 -207 886 765} def/FontInfo 4 dict dup begin/FSType 8 defend def/CIDMapOffset 57 def/FDBytes 1 def/GDBytes 1 def/CIDCount 59 def/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def/FDArray 1 arraydup 0%ADOBeginFontDict4 dict dup begin/FontType 1 def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def%ADOBeginPrivateDict/Private 7 dict dup begin/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/SubrMapOffset 0 def/SDBytes 1 def/SubrCount 5 defend def%ADOEndPrivateDictend put%ADOEndFontDictdef/GlyphDirectory 8 dict defct_GlyphDirProcs beginGlyphDirectory+0 <001C60D8A8C9B5EE310300EE23D0BA079325E1D5F86AF2FE7DC374914003E5DDB91552C283> |1 <001C60D8A8C9B718ECDE54A9FBF37D6B2B56921E89D177D73D061684C41CDE96BC6849A677AE423021> |2 <001C60D8A8C9B66DDCB34383FC54F7623B438CCA3F0F380B30FA47782D72297D4899A559F15B7431BCEDCEA058CC4B3DB2A427D64274846E07DA1ECB444E73C0E3F32C0D6EE48F9F6CF10230D89C9C3809CEB3300F4523511887BC3B26A2C8F18EF86FF83240CD> |3 <001C60D8A8C9B7B3D0EBAB324E1ED3475A0342C61BC047EF934D9B3F3BB49EFE8F5B573CC6B4305834ED8BF5253D3CAC574A2E75DCFF893C5C65D73D972C440766D16564D4736C850FB6FB5091D2E39BA43EA8CD6779A45F5881C11FB679B80F1AD41697B65D33050AE7BF13D1B5F99080E542BBA0FDBB966BB421BD959351DBEE73FB9A986E62A8ADD5E35460E336A002C83ADC6D39427AF2024439B1A9D93EDCEEAFA515D6850035E660B0785C1319A9BA4E4C5AD387E2543C878C7F703039C93685DC7DEC2105F0ECAA67195ED3A96DFB9BD5E2D1B962AB7CA57B5EA750525F4DA5CB0A849B6CE8BF> |4 <001C60D8A8C9B7C9966B4941212FB30D6DD3047C24E7C327EED863E23E4536AE01D1BA8AF1CED7F6C7526A5BC837BBFF7217E84E85251DBC1FC751490C9C0D31E03E08C24330FE2211724B7CED8939A969083C93C97C242FE31BEDEF6BB298E8B0C14198DC99100B2C6C05B27F3BFD0EA400D35328F8E23338ADB0F66A933F6B6DCC13F1D4CDEC9FC57EE59A5717FC30E45E4338361F0A57712B> |5 <001C60D8A8C9B7B3D0EB7AB43FA8E2DB37BADC47C6757DAEBCCD8CBA1C75972273596797CA3CBAD285F64AE163D255E96F78A9E3AA3EE546EB86F1C703017863BE0EEB2BB962385338B5FC7724B40A74FB6A39442EED4D5E1B50C3F15D5581A10E04502F57D4EA60220358123C4B74F78AE23B4B4B9774289B6B4BE44F90159CEC97FA69A6B3D43529105749CE53F085A467CF85A5BF75E9F75A97208BB4DE309BF6> |6 <001C60D8A8C9B732D4865332F86AD0761EEC8F579515630A42939D958260BC100F61BDA0B8E347D24C4D47E3330C27693DF953C205706EC3F313D995D008FE5A1EAD2566647E49F56DB96DA20DC962FA01448C2EED92B472034E98990BC97B350725ECA3F258D03E68006FE635B5E8A1518BB1> |7 <001C60D8A8C9B7C2FB347D09B9B1A76EB2F456F90FB4C35F36D70953ADCFA7F0A5A5C9E39899A5FB026E476281B87EAC1A99771D907DCDF59F833742A629EA9EA97481412E47DD44BE009A61CE19E403C620217B6FD4B272B22160CDA929151143FF94537949E73956668514AA6C3031694B124969D7264722DEBD08EDEB7113285AF26BB1DC10BCB555B7B36C9E7D8118A8A2A386C95DE14CC2BD2C62C5FE5939AADFE21D69FB4C773E1CB15285A0091CCE983A8AC2D02AF1E9B7318B75D806B71E4282D65537D1335BDF8A7CD1B0F11198371F12E6BB1A6554C446D827E0C9030218AED4F9A7026AE478773D0512D956E383DE> |!endct_AddStdCIDMap%%EndResourcect_restoreCIDInit /KAAAAA+Verdana-Identity-H /Identity-H 0 [/KAAAAA+Verdana] ct_ComposeFont pop end end
%ADOEndSubsetFont
/GTMNCQ+Verdana /KAAAAA+Verdana-Identity-H findfont ct_VMDictPutGTMNCQ+Verdana [6.97846 0 0 -6.97846 0 0 ]msf189.202 113.736 mo(\000\001)sh192.131 113.736 mo(\000\002)sh196.539 113.736 mo(\000\003)sh200.169 113.736 mo(\000\004)sh204.312 113.736 mo(\000\005)sh207.941 113.736 mo(\000\006)sh210.683 113.736 mo(\000\007)sh.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: KAAAAA+Verdana-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.ct_GlyphDirProcs begin/KAAAAA+Verdana 14 GetGlyphDirectory8 <001C60D8A8C9B80D906DF55E50F966969EB40674813BF76C87658B6AA5C1A661516D10FD7F867B97E61A6C3C29DF55EF72328A6C013BF705D023A0C6A2FC41FBFB19BA3FC8B8288766583DD2D78E2A48F22FECF7F73833E350B884074DA71A4C55E23B3D> |9 <001C60D8A8C9B85AB9E13EF9F882973975E1C220F630192D3510FBAF62811E46F2> |10 <001C60D8A8C9B7DE87DED2912685F6FFEC5A47FE7D97667D147AEF8030BE3B4931D6D1C3640A7398FA99648A6B08EA0A0009ED785F126E6D953C56F1275AA90FF5DBBDB863C1A26D3E6BA0660492523B91A037CAA08ED7648E190286D30FCDF75B5BA2A08C24AA79AE7027EBC60ECC862EFE6DAFEEDF3796915AD315660FAA591BEAF2D8FC> |11 <001C60D8A8C9B66DDCB34755E936C6D97B57138BD3CF82D45CFD1E1ABF373B1EB431F186325336BAFBC3FB60653590339B4766D5854386A7E9FD99C1E53D284BED3D976665EF75853331FA09A8359C6D38B6AB4E53CBE00755533105C8300856B2618A21ACE693> |12 <001C60D8A8C9B80D909B> |13 <001C60D8A8C9B85AB9E1278D1F1184B008EEA85642623D> |14 <001C60D8A8C9B66DDCB34383FC54F7623B438CCA3F0F380B30FA47782D72297D4899A559F15B7431BCEDFEFC9D6286433FA91D75DBD44AE2A972175BCF7BCD1B11B080F9A0464CF7732AC3AEAADA808D11EAA4C0BD1154375621286B7DCFA63B7922AAD2895D8D4C> |15 <001C60D8A8C9B71131DFB94D2C287C21FED41C955848461095728EE53595DB5468B50F6D11350F0BDA761A8AD51A80E0610836C56A9DA6095BA3963EDD11F883627E3AEAFF801F4D5CEAC205F9A12737D92B995E456B> |16 <001C60D8A8C9B7CC0BB63D34E2A61186FBE01145BF34FC2DC06C75C6D2B14401D3E357580D709EE0> |17 <001C60D8A8C9B65EB406EEF6270EB2B2B3ED8730C411862E3D1275F1D2B3682EAE63D816BDF6653ABB84A5C57FCCBCEE986E1F23420AAF> |18 <001C60D8A8C9B620B7FCAE320A62F0A39F152E85E30E8BA746DFAA85EF057B85C3803FB6A22E675F499E2CECFC5D3EAE60EF7CFF7A9A9A18A09BE810BD3317BFF68C428FB0323C39D445B7517699A419FE05C356585832229DE96000DEA849D45EB23B675682D58B1ED61F1EF461EE891B0C1EAF7761C1856BF2872EE650B9FE232D49B38D4E80E60C3CB7E152E535908D5D1291802C64FA82A0F16573F94F0EF5B38D9029BFC47D5C24E4B8B8942C1AE83C186DA432BA7C9F12D6D934E862B3D7F2FDE9ACFAF253AE30146DB6F68A60FC718783D42E5F10D4B2A372F1D1D82240EBE82510D0458C2F678F57924250A1E99EC9F8749326FE3087F58C> |19 <001C60D8A8C9B66F63164B785927E0F86141AF2A60E0913E5E92FB844949C343B964D74B3109B92BE207AFD90A2B193A095F3357ED3C213A9D2809F928CA46EC65AC8659FE04427531B93917531AC13EEDC1776223EDDFA508405EFBBD187EA2D0923DDCD7130970523956BD197D8D49768BFAF2B61159CAF611E2E6066A5D49E38A1B9FDE58A12C20CCC0332F55A1B04ACB68325693E57BF2D5985955D664B50743AEF6263252A86D28BB6A878127D6A0AA1CD8F1D209B4E0976F8FB94B2FB72361> |20 <001C60D8A8C9B66F63166D14F4F8CD10EDADD23C3861B50D041E42F1118AB29705EAA91B5425BB7A58B4E5017793BF9CDDFC7AE15AC9EA714F1D7FBB7B09E923FF7EEB2F50F6F7F882BC24BD1B1DB511A86C15ED5619A12EE1BD8C32957C2E15000B1A61C33BECA5610408C8B06AA063D20A7A234DD59DA1227B87ACB24B6D4B6220556803874ED959614E6EE6CE0CB9A545746F356959D30623E2299F7892DA5C5544F88778A90BC4E21B2993416C74C4632D651D702700F2F6F12BBEE1B057FEC0CE6C74E0A3D539C2C011074BF2304C20F86C989B01AE9ED9EB7DF2B3C0B19CB914A87A22829563F5BB6F606801FBC71438F7997EB36B49ED6B7BDE4B993AA5CD06AD2A9AFDDD6082BFF279351F8882F3927C30> |21 <001C60D8A8C9B66F631618950AF0FC6E161AF133E9E8D3F41B19C96F44F9C08961715A24E3DC1C2B79D57DA9E2A5D0CBAD75429AFB0625F407436936574DAF5D5678D2CB89956A7D6CE9EE60E8AC39C5D61861D618DD7B56E6F8F3363215F30BFCB0317029578B08A2029E09D6C8D8D1A313150156AC9FEC52673B6387BF2AA53F1978B69F3E2B330D568D5124E4CB73F8C0F430097BAEBF675402911ABCE06531C432B3EA114723410651BF7BBA879319929C664AEADF0812833A61E11405E9F54E86F616C9EF6FB7AA199697A3F4A755F74DB56AC23CA1268B3B355347AA9146BCF43537FBE4D96748891978C8651F61DAA487B00319C2C56452D063A2D62C9A66A440AAF4E93EB00C91C3CAA8A00E042DD177DF33> |!endend end
%ADOEndSubsetFont
GTMNCQ+Verdana [7.97538 0 0 -7.97538 0 0 ]msf225.092 114.234 mo(\000\001)sh228.441 114.234 mo(\000\002)sh233.488 114.234 mo(\000\010)sh236.291 114.234 mo(\000\004)sh241.042 114.234 mo(\000\005)sh245.186 114.234 mo(\000\006)sh248.317 114.234 mo(\000\011)sh250.498 114.234 mo(\000\012)sh255.326 114.234 mo(\000\013)sh260.373 114.234 mo(\000\003)sh264.517 114.234 mo(\000\014)sh267.321 114.234 mo(\000\010)sh270.124 114.234 mo(\000\015)sh272.305 114.234 mo(\000\007)sh277.087 114.234 mo(\000\005)sh281.231 114.234 mo(\000\016)sh286.278 114.234 mo(\000\004)sh291.029 114.234 mo(\000\017)sh294.424 114.234 mo(\000\011)sh296.605 114.234 mo(\000\004)sh301.356 114.234 mo(\000\014)sh304.16 114.234 mo(\000\020)sh308.88 114.234 mo(\000\011)sh311.061 114.234 mo(\000\017)sh314.456 114.234 mo(\000\013)sh319.503 114.234 mo(\000\003)sh323.647 114.234 mo(\000\014)sh326.451 114.234 mo(\000\021)sh331.903 114.234 mo(\000\022)sh337.37 114.234 mo(\000\023)sh342.433 114.234 mo(\000\023)sh347.495 114.234 mo(\000\023)sh352.558 114.234 mo(\000\024)sh357.62 114.234 mo(\000\023)sh362.683 114.234 mo(\000\025)sh133.278 120.683 mo
133.278 131.649 li
@
[.996923 1.99385 ] 0 dsh
133.776 126.166 mo
132.779 126.166 li
.516472 .431495 .431495 .0754711 cmyk
@
[] 0 dsh
98.2264 126.166 mo
133.776 126.166 li
.75021 .679683 .670222 .90164 cmyk
@
.269749 1 1 .319921 cmyk
GTMNCP+ArialMT [7.97538 0 0 -7.97538 0 0 ]msf119.819 133.877 mo(\000\001)sh124.243 133.877 mo(\000\002)sh128.667 133.877 mo(\000\002)sh[.996923 1.99385 ] 0 dsh
173.758 121.182 mo
cp
.516472 .431495 .431495 .0754711 cmyk
@
[] 0 dsh
133.776 121.182 mo
173.758 121.182 li
.75021 .679683 .670222 .90164 cmyk
@
.516472 .431495 .431495 .0754711 cmyk
GTMNCQ+Verdana [6.97846 0 0 -6.97846 0 0 ]msf189.202 123.705 mo(\000\001)sh192.131 123.705 mo(\000\002)sh196.539 123.705 mo(\000\003)sh200.169 123.705 mo(\000\004)sh204.312 123.705 mo(\000\005)sh207.941 123.705 mo(\000\006)sh210.683 123.705 mo(\000\007)sh.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: KAAAAA+Verdana-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.ct_GlyphDirProcs begin/KAAAAA+Verdana 10 GetGlyphDirectory22 <001C60D8A8C9B6C769219C77DCC1823ED110BBD396742F7AD82A2BE946A1F1E7F96995265C5743C39A433358BBDDF2DB9D043CCDEF7BAABB2C23CDE78663D67A63C539C2AABE10802348F6ECAFBD0B93C1D94D52C99E0F1BDF6A76BC0C6A9BD94F82348445638F9584DCE58D6BF0FC3E3A5C418E4FDF46BB72DF98DD13F861C6136F5250F145DA294BBF26BA760100A914CCA63C19095E83D76DD3A020D23A5E47B7F99994D0480DD7B8C2F29049E555399DF6C01B7744E372F21A1CB7> |23 <001C60D8A8C9B662FEEB93AF28785291DD15318FF9967A8CA61C5518D693D1CAB00106A1D1C4145637AAB8D37B9495AAA4131EDABAB17DC24CBA3FBD79D25887C03417C9AB06EEB3E72B6E8FE1F997ECACA6C67E1189BA74E7FFBCE0D8356FAD906876A2384B09AF4AC8262ACB4512F10CB98BD2D64905F519B2F8F635736A70701B31254D02CC480043B0F25FF284985653C4B243174EA6DC8FF73C3803F7B4E725> |24 <001C60D8A8C9B66F6316781D1D628F42F55637AA9E7B9173C78799A217467E19B39035D878C64C41B02A4F26AB3A2B60F0227828D5629C08FFF11246B6196F8FBD31D2> |25 <001C60D8A8C9B629F1C123AAA8639254BE3B27049C3BADD27AC775D2CC31C5806FF803FF8644C277733CA15B6594E4EFB4D80E8BF9> |26 <001C60D8A8C9B62B94958DC5B8F16C3D6AE34197C4187FEB5191C0D1A37716D9258261BEE53C6D81B25980845ED7704601DDD7A1F90C56124C7FBEA89001C35800A1A4DF7AB150FBF3A7E90590F0BA126F31B36B757F9C801CC593D712CDCE42450DBCF57E4FF47D090DB221B0E9CB9DE54950289D031773F97BC7B6B0807DB785E0475A7470D3CA8F0246AB1466398546E0C2E8D33A> |27 <001C60D8A8C9B66F63166945D8E069B0DF98623B6E40FD99941BE3BA15FD1AB301686A6518A36191C1F26F3EF1D61566F420F97A0AAEE0B6A26D291C62DAC893575F7ACCC687EF10A889E108536482F09706557E974F6EB10179C67FD6994B6BD4B613F82A7EA3575625B41C116B7E94ADF421117AA4BBCBE261CCA2B1EE30C6B47AC557B794220FA1C737E7A7F93FD6A7CCE2A4ECF612992FC46EAE933421912E07AE7D2E3DE3DBBB9696FAC27A93ED1FCA5B95D97094C0C2B71710564C372200F1350566AA936E61EB> |28 <001C60D8A8C9B66F631680C633399E6ECC9330E8DA392BC358664638B0B234F58F774E09B54A525327ED8DACDDA6BFA25C3D534187747D9307560905531988F325BF1A537B9F2BA3260F524F88D80960F904C6313BFE8F3C61058CBBA3593E3AA002C4F1F374174954841256A43EAD17A33C461596B94513C3235D7F1DA11C39742CE1EE0BBCA7BCE1F160076B480F6CD1A2F5E2A25D9657C8C3CAB31582764D50030070513282A351417EC34CF0CBFFBE3E8EDBCD28BB483BFB8CA96AED18907A454A2622F8CA7FB0C1BFA904FD56FB7DB7F7912DD6BC1CD36E57ADD631819446CE5838669AF9E3A723EAB8E8FA6CB8BF2F0F8E068AD69CC598D9B0BA26161FD3C2161829C2904F477E9C18936740942B0B9AE3966ACA3B92BB1C9B> |29 <001C60D8A8C9B66F631606295C8F132006C54A4683C3224752C854C0AA7FB080A2F6DA1D6E14378ADDA1414336EA1A42666E46910A14EEA5E8> |30 <001C60D8A8C9B66F63167466B0227B28E0B40067B4EC5453ACACBBB0B8A9E97F53B9B1C22C0B20AE7D084292C0F372D6EBC93BB637B8BB4BEEE897AC88F64B713F7C774AF03266F05010EFD04D3CC087CC5229517E76F9BCC6B7BDDF928FC8D1CCE74357B2ABD925EEC942AE0B6F081025669F2DC344432C772DEEA5C1D1D08544EA66F76A5559D0E7B9E1B48AD6595C735E01D04775F0DFAFE86CEC269383B49C052FF6E07CCF9872D884748A7346F85F1F348CE6D863669FFEB58377DF6EDF38ED81C5EF778527DB351FF1E82CE7FF93CEBE85AA3D962BF2D76CE727BD8C0393261C0EEEA808E19F84D42D19ED3397A45954E3521A7AFAE58ECBFB0683B74D0745364CBB847C5AEE3246BE9BA3CF4C0B36146ACE56806A84F1> |31 <001C60D8A8C9B66F63161529EA564EC62603B51DE0FC3BFAA1B7423CEB4026E2B7A48A3698F3261537A73234F509E63118B0A9DB297314A83D2D76518CEB33FEBB4BFD9C4CBA862C3A901200541F8E725B136C80185DEFD21B30CEEF6DF3BCD95CE67B338F41D998128B724EAF9D69D3FA8FED78DF70F68FB7C2B71838C6609C6C965B70532B95F5779F7BF1AA8C4A7B19767602DE53B6CFA2> |!endend end
%ADOEndSubsetFont
GTMNCQ+Verdana [7.97538 0 0 -7.97538 0 0 ]msf225.092 124.203 mo(\000\026)sh231.369 124.203 mo(\000\003)sh235.513 124.203 mo(\000\011)sh237.693 124.203 mo(\000\027)sh242.662 124.203 mo(\000\016)sh247.709 124.203 mo(\000\007)sh252.491 124.203 mo(\000\002)sh257.538 124.203 mo(\000\004)sh262.289 124.203 mo(\000\003)sh266.433 124.203 mo(\000\014)sh269.237 124.203 mo(\000\011)sh271.417 124.203 mo(\000\002)sh276.386 124.203 mo(\000\020)sh281.106 124.203 mo(\000\011)sh283.287 124.203 mo(\000\017)sh286.543 124.203 mo(\000\007)sh291.325 124.203 mo(\000\004)sh296.076 124.203 mo(\000\014)sh298.879 124.203 mo(\000\011)sh301.06 124.203 mo(\000\010)sh303.864 124.203 mo(\000\015)sh306.045 124.203 mo(\000\007)sh310.765 124.203 mo(\000\020)sh315.484 124.203 mo(\000\011)sh317.665 124.203 mo(\000\017)sh321.061 124.203 mo(\000\013)sh326.108 124.203 mo(\000\003)sh330.251 124.203 mo(\000\014)sh333.055 124.203 mo(\000\030)sh338.118 124.203 mo(\000\014)sh340.922 124.203 mo(\000\031)sh346.436 124.203 mo(\000\032)sh351.981 124.203 mo(\000\033)sh357.044 124.203 mo(\000\034)sh362.106 124.203 mo(\000\035)sh367.169 124.203 mo(\000\036)sh372.231 124.203 mo(\000\024)sh377.294 124.203 mo(\000\037)sh[.996923 1.99385 ] 0 dsh
173.725 131.151 mo
cp
.516472 .431495 .431495 .0754711 cmyk
@
[] 0 dsh
133.776 131.151 mo
173.725 131.151 li
.75021 .679683 .670222 .90164 cmyk
@
.516472 .431495 .431495 .0754711 cmyk
GTMNCQ+Verdana [6.97846 0 0 -6.97846 0 0 ]msf189.202 133.674 mo(\000\001)sh192.131 133.674 mo(\000\002)sh196.539 133.674 mo(\000\003)sh200.169 133.674 mo(\000\004)sh204.312 133.674 mo(\000\005)sh207.941 133.674 mo(\000\006)sh210.683 133.674 mo(\000\007)sh.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: KAAAAA+Verdana-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.ct_GlyphDirProcs begin/KAAAAA+Verdana 7 GetGlyphDirectory32 <001C60D8A8C9B65EB4061B1BAD12DC50CEF292C23EECA708D258D0802433BC7845D087FEEF64D268B951AA872EEC30B18C8D4A3D9AE0AF4175A80E6D52F86F84E48682266A78E736E75F853191D9DD5A5A2602798520E17B509B7701FBC2F6F83165270E9194DA68EC8DAECB84E1693A86CA491413CBB629ECED176EDD874A95B3618387E2EA4973572E73CF829168DFB1651E372802970071C6F1D88F4320FFB44D286DCDEDE359F550F64A53CD1B23AD2BFF5D976C1EF2173157DB28A78485E81C73DE08D13DC3C01E4EA99023794466212A6A0FA1C2EBF1A10EBFC5B30117AF25FF4F4908C56C11148152> |33 <001C60D8A8C9B662FEEBAC79501F04D09BA2FA7B5A33762C71F0C8415568B5C68791CE6E7332D2A436B37B86B05BF0532D41F1F79240C785684AD10547BDC0FB515F1D59FB87353252C4164321974F1003D78984F104063AA367236709C35E035FBE124F93E030637D7EC691CBFC4C91AE3D135F45E192D75F0E36F2B88D8C91AA533CAC84E772307EBC501E7B01DFDAB5307CB2D6DABFD1A8B58FB5C71B96> |34 <001C60D8A8C9B7CC0BB9337CBD7CC739498967C2AE0CF68C180147F29F72BC5136264E35F0DCF1C1F6D1A265019212867F8887413F069564E965D4C67E> |35 <001C60D8A8C9B662FEEBAC78B8595B250B3A2A156DCA9F2BF0D8B1DB31EC1382999612176F78FC05CA7B66D896C753E49DC1C12F87FCE9333A6F04B02C2D2444D8D955E48DB7D792C4C7793A6BE74A728F313F8CFBC757241E4634124FC8BD58B223E2A60C834BAAB9FEC44CD5695D26133A1AC8253D1183A7B65EB079EA05DB920DA95C5435CC59CD70047D843FA25ECC3E9173FADAA32ECDA36EEFA29A76199842EE214E021EE7835F7BF3142EEB779CA8A4349F0729CAB7809D71A4265CADAEC3C1D2036913BE4E2C5DC50189F195A2F154E843EE1DD0A072B534E3EEA8667E1AE56ACE9284> |36 <001C60D8A8C9B776A0631AD06C3689D62AE24BE4FA9C555BD9E9EFC598D443789AF7086D02F06FC6701626F3ECA522968DEDAC53A3D71B81512A716A43F9C8F2005B3BF511D57A22E156F83EEF84C7E586713C4D244A4E9DE21C9704C3B83845350E16630F> |37 <001C60D8A8C9B6E156CCD12CC4D4D48214CA11D4A1246474BB7194FA1FC6391924A4DCA96EA428DB19C8DDD143> |38 <001C60D8A8C9B66F631614D1B7B7DD96DCB35DB9877A9B5DC44242889684B1BE1815EA7E> |!endend end
%ADOEndSubsetFont
GTMNCQ+Verdana [7.97538 0 0 -7.97538 0 0 ]msf225.092 134.173 mo(\000 )sh230.544 134.173 mo(\000\027)sh235.513 134.173 mo(\000\012)sh240.341 134.173 mo(\000!)sh245.31 134.173 mo(\000\012)sh250.139 134.173 mo(\000\027)sh255.108 134.173 mo(\000\006)sh258.239 134.173 mo(\000\004)sh262.99 134.173 mo(\000\017)sh266.246 134.173 mo(\000\007)sh271.028 134.173 mo(\000\014)sh273.832 134.173 mo(\000\004)sh278.583 134.173 mo(\000")sh283.303 134.173 mo(\000\011)sh285.483 134.173 mo(\000#)sh290.452 134.173 mo(\000\013)sh295.499 134.173 mo(\000\007)sh300.281 134.173 mo(\000\014)sh303.085 134.173 mo(\000\011)sh305.266 134.173 mo(\000\010)sh308.07 134.173 mo(\000\015)sh310.251 134.173 mo(\000\007)sh314.97 134.173 mo(\000\020)sh319.69 134.173 mo(\000\011)sh321.871 134.173 mo(\000\017)sh325.267 134.173 mo(\000\013)sh330.314 134.173 mo(\000\003)sh334.457 134.173 mo(\000\014)sh337.261 134.173 mo(\000\030)sh342.324 134.173 mo(\000\014)sh345.127 134.173 mo(\000$)sh348.741 134.173 mo(\000%)sh354.707 134.173 mo(\000\023)sh359.77 134.173 mo(\000\024)sh364.832 134.173 mo(\000\030)sh369.895 134.173 mo(\000&)sh374.957 134.173 mo(\000\023)sh380.02 134.173 mo(\000&)sh69.6473 140.622 mo
69.6473 159.065 li
@
[.996923 1.99385 ] 0 dsh
70.1458 149.843 mo
69.1488 149.843 li
.516472 .431495 .431495 .0754711 cmyk
@
[] 0 dsh
19.9385 149.843 mo
70.1458 149.843 li
.75021 .679683 .670222 .90164 cmyk
@
.269749 1 1 .319921 cmyk
GTMNCP+ArialMT [7.97538 0 0 -7.97538 0 0 ]msf56.1889 157.554 mo(\000\001)sh60.6127 157.554 mo(\000\002)sh65.0365 157.554 mo(\000\002)sh[.996923 1.99385 ] 0 dsh
132.032 141.12 mo
cp
.516472 .431495 .431495 .0754711 cmyk
@
[] 0 dsh
70.1458 141.12 mo
132.032 141.12 li
.75021 .679683 .670222 .90164 cmyk
@
.516472 .431495 .431495 .0754711 cmyk
GTMNCQ+Verdana [6.97846 0 0 -6.97846 0 0 ]msf189.202 143.643 mo(\000\001)sh192.131 143.643 mo(\000\002)sh196.539 143.643 mo(\000\003)sh200.169 143.643 mo(\000\004)sh204.312 143.643 mo(\000\005)sh207.941 143.643 mo(\000\006)sh210.683 143.643 mo(\000\007)sh.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: KAAAAA+Verdana-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.ct_GlyphDirProcs begin/KAAAAA+Verdana 2 GetGlyphDirectory39 <001C60D8A8C9B7EF3224B0F71BCBE6D2F1FE9DABFE18C754025A471B1B> |40 <001C60D8A8C9B7C054163AC2087CB63A5A59269361CEBE2146910AB13F891533D8984044569D7FA1B19721C41242EA2F5536DA2D18BD29BE8C8D6F1F50DB0881C8C503C6F765795B1EB42EE6166CED00368D664589331F75105492CADD6DD040075B944553853BAB0595ECC86A3DFAF3DFAEF2FF99E48A0D35080D5EB03ACFED606956AB5432BDAA8FAB492C680D45E65F9F79B8A6230598D3> |!endend end
%ADOEndSubsetFont
GTMNCQ+Verdana [7.97538 0 0 -7.97538 0 0 ]msf225.092 144.142 mo(\000')sh229.531 144.142 mo(\000\007)sh234.313 144.142 mo(\000\014)sh237.117 144.142 mo(\000$)sh240.731 144.142 mo(\000\012)sh245.56 144.142 mo(\000\015)sh247.74 144.142 mo(\000\015)sh249.921 144.142 mo(\000\007)sh254.703 144.142 mo(\000\014)sh257.507 144.142 mo(\000\020)sh262.227 144.142 mo(\000\011)sh264.408 144.142 mo(\000\017)sh267.803 144.142 mo(\000\013)sh272.85 144.142 mo(\000\003)sh276.994 144.142 mo(\000\014)sh279.798 144.142 mo(\000\031)sh285.312 144.142 mo(\000\()sh290.11 144.142 mo(\000&)sh295.172 144.142 mo(\000\030)sh300.235 144.142 mo(\000\035)sh305.297 144.142 mo(\000\023)sh310.36 144.142 mo(\000&)sh315.422 144.142 mo(\000\035)sh83.3575 150.591 mo
83.3575 166.542 li
@
[.996923 1.99385 ] 0 dsh
83.856 158.566 mo
82.859 158.566 li
.516472 .431495 .431495 .0754711 cmyk
@
[] 0 dsh
70.1458 158.566 mo
83.856 158.566 li
.75021 .679683 .670222 .90164 cmyk
@
.269749 1 1 .319921 cmyk
%ADOBeginSubsetFont: JAAAAA+ArialMT-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.ct_GlyphDirProcs begin/JAAAAA+ArialMT 2 GetGlyphDirectory3 <001C60D8A8C9B790A84ED5ECB879D92729F82A9C259B0D761BE99FFA80146597BB977D58AFF048E4F91815DDBA39E57EB71265BC49C057977CEF44A37D23DEDFE92144> |4 <001C60D8A8C9B790A86080BF6551069627E9F84EDFC760FF24AC7A7FC285964379EE0B15C47E54AB9C11D584A6050271CA96315A9257D65C9E30402A1EB8E3DBF899B38D121DF60B1DFEB5B3240856DCB7C3AC689FC70572C2FC4564652284C782208E147874C36A970E62146F0D1781F9F56F1CFFC9F8D30FF1E3EFB37755CF5BD3352D6C60FD3B4E57448FC5A019182596EE8670068350F91AF45ED7E10EC6FA21E0AFCF28A14B1C49234797F5E1C6D88438EFAB22FD13B3AA18A901CEFABDE6EEC878BBCF647F6CBDBFE635D88773E934F88905FAD6B87EA0DC8E086350D9FC6A664C5B69894ECE31E4715BE9416DF93C7CC6D8A7421734F1A4064677828E> |!endend end
%ADOEndSubsetFont
GTMNCP+ArialMT [7.97538 0 0 -7.97538 0 0 ]msf74.8837 166.277 mo(\000\003)sh79.3075 166.277 mo(\000\004)sh[.996923 1.99385 ] 0 dsh
152.994 151.089 mo
cp
.516472 .431495 .431495 .0754711 cmyk
@
[] 0 dsh
83.856 151.089 mo
152.994 151.089 li
.75021 .679683 .670222 .90164 cmyk
@
.516472 .431495 .431495 .0754711 cmyk
GTMNCQ+Verdana [6.97846 0 0 -6.97846 0 0 ]msf189.202 153.613 mo(\000\001)sh192.131 153.613 mo(\000\002)sh196.539 153.613 mo(\000\003)sh200.169 153.613 mo(\000\004)sh204.312 153.613 mo(\000\005)sh207.941 153.613 mo(\000\006)sh210.683 153.613 mo(\000\007)sh.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: KAAAAA+Verdana-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.ct_GlyphDirProcs begin/KAAAAA+Verdana 2 GetGlyphDirectory41 <001C60D8A8C9B7CC0BB63D34E2A6118729C3415C915FC094150473E46051395DC35D5ADF9DC0F5F0516AD9E1> |42 <001C60D8A8C9B7FD849593B85D8724D10C8952AD6BD2233DAD9C19B04C67299322AC7EC49C6333C581> |!endend end
%ADOEndSubsetFont
GTMNCQ+Verdana [7.97538 0 0 -7.97538 0 0 ]msf225.092 154.111 mo(\000')sh229.095 154.111 mo(\000\))sh233.768 154.111 mo(\000#)sh238.737 154.111 mo(\000\013)sh243.784 154.111 mo(\000\003)sh247.927 154.111 mo(\000\014)sh250.731 154.111 mo(\000\015)sh252.912 154.111 mo(\000\011)sh255.093 154.111 mo(\000\002)sh260.14 154.111 mo(\000\004)sh264.891 154.111 mo(\000\012)sh269.719 154.111 mo(\000\015)sh271.9 154.111 mo(\000\007)sh276.682 154.111 mo(\000\017)sh280.078 154.111 mo(\000\011)sh282.259 154.111 mo(\000\003)sh286.402 154.111 mo(\000\014)sh289.206 154.111 mo(\000\020)sh293.926 154.111 mo(\000\011)sh296.107 154.111 mo(\000\017)sh299.503 154.111 mo(\000\013)sh304.549 154.111 mo(\000\003)sh308.693 154.111 mo(\000\014)sh311.497 154.111 mo(\000\030)sh316.559 154.111 mo(\000\014)sh319.363 154.111 mo(\000$)sh322.977 154.111 mo(\000*)sh327.557 154.111 mo(\000&)sh332.619 154.111 mo(\000\037)sh337.682 154.111 mo(\000\023)sh342.744 154.111 mo(\000\034)sh347.807 154.111 mo(\000\035)sh352.869 154.111 mo(\000\036)sh96.6639 160.56 mo
96.6639 171.526 li
@
[.996923 1.99385 ] 0 dsh
97.1624 166.043 mo
96.1655 166.043 li
.516472 .431495 .431495 .0754711 cmyk
@
[] 0 dsh
83.856 166.043 mo
97.1624 166.043 li
.75021 .679683 .670222 .90164 cmyk
@
.269749 1 1 .319921 cmyk
%ADOBeginSubsetFont: JAAAAA+ArialMT-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.ct_GlyphDirProcs begin/JAAAAA+ArialMT 1 GetGlyphDirectory5 <001C60D8A8C9B790A84EB1F7D2696CC01CB2197AF736B1DEDF341BC21C8396ECDCDC8539BA300F637574662B1EAD52E4FB84727DC4CDF76800A9636E8F5239BFAB4FB6B0DB7E96911E4C3E2DD6AAC3FD786906FEAC5FECA7D7D95FC8AA2E2FD35DC64AEFDE4B0365F3B92106D3D5EA8110A9D3E1BED55F79BFD84A3BCF217A75F3EB34159FE850CD75570B86ABFF65CDFA80832F1E1E72D7A617751404C6DF5A7AEEB765F0847D297F0CE226EAB08A9A7CA5D3B6F541920954648CFB35F9D271CE3A77257178A95E6AC9931252E537604BDAAB92E78F6194> |!endend end
%ADOEndSubsetFont
GTMNCP+ArialMT [7.97538 0 0 -7.97538 0 0 ]msf88.1901 173.754 mo(\000\003)sh92.6139 173.754 mo(\000\005)sh[.996923 1.99385 ] 0 dsh
132.844 161.058 mo
cp
.516472 .431495 .431495 .0754711 cmyk
@
[] 0 dsh
97.1624 161.058 mo
132.844 161.058 li
.75021 .679683 .670222 .90164 cmyk
@
.516472 .431495 .431495 .0754711 cmyk
GTMNCQ+Verdana [6.97846 0 0 -6.97846 0 0 ]msf189.202 163.582 mo(\000\001)sh192.131 163.582 mo(\000\002)sh196.539 163.582 mo(\000\003)sh200.169 163.582 mo(\000\004)sh204.312 163.582 mo(\000\005)sh207.941 163.582 mo(\000\006)sh210.683 163.582 mo(\000\007)sh.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: KAAAAA+Verdana-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.ct_GlyphDirProcs begin/KAAAAA+Verdana 1 GetGlyphDirectory43 <001C60D8A8C9B662FEEB9271C049AC5FAA8B6167D27752CDE6AEA2EA7AA5E180858850A12534277C26BCF61506FC35296CC771AD089A8E4EDD5CFCA9C08B04A28582B1B3587EB1F82C4F04D0601C6525B73414E1F83BE5C6B04F1AE72D9A95E289D8FE69145BCD9F7BF86F447837E5CAC3141AE1562F8C69794F85BF9EEC8CD7865E852C887D90619BBAA2A6B28DC1EE2CA729F0318B031A11F94A4E763238EBD470C2> |!endend end
%ADOEndSubsetFont
GTMNCQ+Verdana [7.97538 0 0 -7.97538 0 0 ]msf225.092 164.08 mo(\000 )sh230.544 164.08 mo(\000\007)sh235.326 164.08 mo(\000\005)sh239.469 164.08 mo(\000+)sh244.438 164.08 mo(\000\017)sh247.834 164.08 mo(\000\012)sh252.663 164.08 mo(\000\012)sh257.492 164.08 mo(\000!)sh262.461 164.08 mo(\000\014)sh265.264 164.08 mo(\000\020)sh269.984 164.08 mo(\000\011)sh272.165 164.08 mo(\000\017)sh275.561 164.08 mo(\000\013)sh280.608 164.08 mo(\000\003)sh284.751 164.08 mo(\000\014)sh287.555 164.08 mo(\000\021)sh293.007 164.08 mo(\000*)sh297.587 164.08 mo(\000\023)sh302.649 164.08 mo(\000\024)sh307.712 164.08 mo(\000\037)sh312.774 164.08 mo(\000\024)sh317.837 164.08 mo(\000\037)sh322.899 164.08 mo(\000\035)sh[.996923 1.99385 ] 0 dsh
173.243 171.028 mo
cp
.516472 .431495 .431495 .0754711 cmyk
@
[] 0 dsh
97.1624 171.028 mo
173.243 171.028 li
.75021 .679683 .670222 .90164 cmyk
@
.516472 .431495 .431495 .0754711 cmyk
GTMNCQ+Verdana [6.97846 0 0 -6.97846 0 0 ]msf189.202 173.551 mo(\000\001)sh192.131 173.551 mo(\000\002)sh196.539 173.551 mo(\000\003)sh200.169 173.551 mo(\000\004)sh204.312 173.551 mo(\000\005)sh207.941 173.551 mo(\000\006)sh210.683 173.551 mo(\000\007)sh.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: KAAAAA+Verdana-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.ct_GlyphDirProcs begin/KAAAAA+Verdana 2 GetGlyphDirectory44 <001C60D8A8C9B6E3FA5124FE1383A7FC75D290B1B03E20DDE6EB87A8855308ED89D80DE6947234BDEBBAB9CE89> |45 <001C60D8A8C9B5CDADF513B0861227C83E14E80F421418FEFF1D6581FFBA5D00B142F64F90BCF7FE6C31EC3282ADE957F3764F67E7D03D91121C12E2CA523D71EB9AB2EC7E3F2AA6561EA70F887159C9BB7A5D2E6AA40286BDF75EF50C4E18D239E7AB79BCD8EE30D8E4AA5D901989AD753ECD0B436CD9ABFE30FEE5CBA840DDFF11A2991141C9F55ABC218DE6618E7DE0B148C3227CA75690C20ABBF6F07E6E5F1A7520BF97AEB9385C04DAC6239FD15743D6548ABDED09F8B521FD35553AD29974C2> |!endend end
%ADOEndSubsetFont
GTMNCQ+Verdana [7.97538 0 0 -7.97538 0 0 ]msf225.092 174.05 mo(\000,)sh231.073 174.05 mo(\000\007)sh235.855 174.05 mo(\000\015)sh238.036 174.05 mo(\000\))sh242.678 174.05 mo(\000\012)sh247.507 174.05 mo(\000-)sh255.264 174.05 mo(\000\012)sh260.093 174.05 mo(\000\017)sh263.489 174.05 mo(\000\027)sh268.458 174.05 mo(\000\016)sh273.505 174.05 mo(\000\007)sh278.287 174.05 mo(\000\014)sh281.091 174.05 mo(\000\016)sh286.138 174.05 mo(\000\007)sh290.92 174.05 mo(\000\015)sh293.1 174.05 mo(\000\))sh297.82 174.05 mo(\000\003)sh301.964 174.05 mo(\000\014)sh304.768 174.05 mo(\000\020)sh309.487 174.05 mo(\000\011)sh311.668 174.05 mo(\000\017)sh315.064 174.05 mo(\000\013)sh320.111 174.05 mo(\000\003)sh324.254 174.05 mo(\000\014)sh327.058 174.05 mo(\000\031)sh332.572 174.05 mo(\000*)sh337.152 174.05 mo(\000\025)sh342.214 174.05 mo(\000\024)sh347.277 174.05 mo(\000\024)sh352.339 174.05 mo(\000\034)sh357.402 174.05 mo(\000\035)sh362.465 174.05 mo(\000\035)sh19.44 191.714 mo
19.44 261.561 li
@
[.996923 1.99385 ] 0 dsh
16.1638 226.637 mo
18.9415 226.637 li
.516472 .431495 .431495 .0754711 cmyk
@
[] 0 dsh
5.98154 226.637 mo
16.1638 226.637 li
.75021 .679683 .670222 .90164 cmyk
@
.269749 1 1 .319921 cmyk
GTMNCP+ArialMT [7.97538 0 0 -7.97538 0 0 ]msf5.98154 234.348 mo(\000\001)sh10.4054 234.348 mo(\000\002)sh14.8292 234.348 mo(\000\002)sh42.6558 180.498 mo
42.6558 203.926 li
.75021 .679683 .670222 .90164 cmyk
@
[.996923 1.99385 ] 0 dsh
43.1543 192.212 mo
42.1573 192.212 li
.516472 .431495 .431495 .0754711 cmyk
@
[] 0 dsh
19.9385 192.212 mo
43.1543 192.212 li
.75021 .679683 .670222 .90164 cmyk
@
.269749 1 1 .319921 cmyk
%ADOBeginSubsetFont: JAAAAA+ArialMT-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.ct_GlyphDirProcs begin/JAAAAA+ArialMT 1 GetGlyphDirectory6 <001C60D8A8C9B790A84172C4B8F0DB98B1A038EB0C10DF3C1E49605BE59E47F2E2FDEF2A50B351D1F5D097168BF955CB8D74A341CF7DC6E00FE5DBE7D34D9A4BDE411EACA4A56963AA7EB0578CF779105798C0FC5F936CD619C8486495BB3AE08FD234DA955B0D0F745D1FEB239E375036735A4473EC84AF229E0501491568BD386FE0B0446D5600BF3E2A0F514A9D9D89E4EC1F69A95BF19253F0BF10524BC9670FC3B1E3FB90F608D4B9F3492EF8D0029B72B64AC016C5732546B7CE8E3AF23DEF55A23DCCA8C2FFC4AC9098F19AFC28BB4DED5AB84135A080ACAAE7EA3DDD91C1FD> |!endend end
%ADOEndSubsetFont
GTMNCP+ArialMT [7.97538 0 0 -7.97538 0 0 ]msf34.1819 199.923 mo(\000\006)sh38.6058 199.923 mo(\000\004)sh[.996923 1.99385 ] 0 dsh
189.002 180.997 mo
cp
.516472 .431495 .431495 .0754711 cmyk
@
[] 0 dsh
43.1543 180.997 mo
189.002 180.997 li
.75021 .679683 .670222 .90164 cmyk
@
.516472 .431495 .431495 .0754711 cmyk
GTMNCQ+Verdana [6.97846 0 0 -6.97846 0 0 ]msf189.202 183.52 mo(\000\001)sh192.131 183.52 mo(\000\002)sh196.539 183.52 mo(\000\003)sh200.169 183.52 mo(\000\004)sh204.312 183.52 mo(\000\005)sh207.941 183.52 mo(\000\006)sh210.683 183.52 mo(\000\007)sh.269749 1 1 .319921 cmyk
%ADOBeginSubsetFont: KAAAAA+Verdana-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.ct_GlyphDirProcs begin/KAAAAA+Verdana 1 GetGlyphDirectory46 <001C60D8A8C9B6BC88CC4CEC428D9465F68B03CA0B8FC7D85B01610FEB462619E89D0F7E4D99CD8AB5978FD40816BBEAB2B1D8E1BC0D969BB4> |!endend end
%ADOEndSubsetFont
GTMNCQ+Verdana [7.97538 0 0 -7.97538 0 0 ]msf225.092 184.019 mo(\000 )sh230.544 184.019 mo(\000\012)sh235.372 184.019 mo(\000\015)sh237.553 184.019 mo(\000\004)sh242.304 184.019 mo(\000\002)sh247.351 184.019 mo(\000\012)sh252.18 184.019 mo(\000\027)sh257.149 184.019 mo(\000\003)sh261.292 184.019 mo(\000\011)sh263.473 184.019 mo(\000\003)sh267.617 184.019 mo(\000\014)sh270.42 184.019 mo(\000\011)sh272.601 184.019 mo(\000\002)sh277.57 184.019 mo(\000\020)sh282.29 184.019 mo(\000\011)sh284.471 184.019 mo(\000\005)sh288.614 184.019 mo(\000\006)sh291.745 184.019 mo(\000\007)sh296.527 184.019 mo(\000\014)sh299.331 184.019 mo(\000\020)sh304.051 184.019 mo(\000\011)sh306.232 184.019 mo(\000\017)sh309.628 184.019 mo(\000\013)sh314.674 184.019 mo(\000\003)sh318.818 184.019 mo(\000\014)sh321.622 184.019 mo(\000\030)sh326.684 184.019 mo(\000\030)sh331.747 184.019 mo(\000\014)sh334.551 184.019 mo(\000.)sh341.264 184.019 mo(\000,)sh347.246 184.019 mo(\000&)sh352.308 184.019 mo(\000\037)sh357.371 184.019 mo(\000&)sh362.433 184.019 mo(\000\033)sh367.496 184.019 mo(\000\037)sh372.558 184.019 mo(\000\036)sh149.341 195.452 mo
149.341 211.403 li
.75021 .679683 .670222 .90164 cmyk
@
[.996923 1.99385 ] 0 dsh
149.84 203.428 mo
148.843 203.428 li
.516472 .431495 .431495 .0754711 cmyk
@
[] 0 dsh
43.1543 203.428 mo
149.84 203.428 li
.75021 .679683 .670222 .90164 cmyk
@
.269749 1 1 .319921 cmyk
GTMNCP+ArialMT [7.97538 0 0 -7.97538 0 0 ]msf135.883 211.138 mo(\000\001)sh140.307 211.138 mo(\000\002)sh144.73 211.138 mo(\000\002)sh184.775 190.468 mo
184.775 201.434 li
.75021 .679683 .670222 .90164 cmyk
@
[.996923 1.99385 ] 0 dsh
185.273 195.951 mo
184.276 195.951 li
.516472 .431495 .431495 .0754711 cmyk
@
[] 0 dsh
149.84 195.951 mo
185.273 195.951 li
.75021 .679683 .670222 .90164 cmyk
@
.269749 1 1 .319921 cmyk
GTMNCP+ArialMT [7.97538 0 0 -7.97538 0 0 ]msf171.316 203.661 mo(\000\001)sh175.74 203.661 mo(\000\002)sh180.164 203.661 mo(\000\002)sh[.996923 1.99385 ] 0 dsh
189.202 190.966 mo
cp
.516472 .431495 .431495 .0754711 cmyk
@
[] 0 dsh
185.273 190.966 mo
189.202 190.966 li
.75021 .679683 .670222 .90164 cmyk
@
.516472 .431495 .431495 .0754711 cmyk
GTMNCQ+Verdana [6.97846 0 0 -6.97846 0 0 ]msf189.202 193.49 mo(\000\001)sh192.131 193.49 mo(\000\002)sh196.539 193.49 mo(\000\003)sh200.169 193.49 mo(\000\004)sh204.312 193.49 mo(\000\005)sh207.941 193.49 mo(\000\006)sh210.683 193.49 mo(\000\007)sh.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: KAAAAA+Verdana-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.ct_GlyphDirProcs begin/KAAAAA+Verdana 3 GetGlyphDirectory47 <001C60D8A8C9B66DDCB325A2E5B7F547BB2132FCA5DEF421E8E43F89B235F45803752BE7FE42F9C349B7A8A7E4B7> |48 <001C60D8A8C9B662FEEBA3C630993C2D63F7F620EC522EBB7D5165DAA3194FB97808763F564105EE0E67BA2438F6A04859160964356E65F63EE6A2914AC0C3DEFDBD2F37FCD15107354AB036EF5BC526C695C5BD8D2AA8A9605AC1EDB9C3973318CDDBCA988F8403B5E0AECC439C8FF3AF8882AFCCC19620E753755E8A5972E2F12C0C38295AF761D39C9779B74EB8B2DB55E28A4966E916CF9B8554675718FA1C> |49 <001C60D8A8C9B7D54578E9A8D4CFBFBA0401F92D85D2ADFC198C2CF716980007DDB2241596F7D4F413ACA6DC6C04> |!endend end
%ADOEndSubsetFont
GTMNCQ+Verdana [7.97538 0 0 -7.97538 0 0 ]msf225.092 193.988 mo(\000/)sh230.123 193.988 mo(\000\005)sh234.266 193.988 mo(\000\006)sh237.397 193.988 mo(\000\017)sh240.793 193.988 mo(\000\012)sh245.622 193.988 mo(\000\027)sh250.591 193.988 mo(\000\011)sh252.772 193.988 mo(\000\003)sh256.915 193.988 mo(\000\014)sh259.719 193.988 mo(\000\012)sh264.548 193.988 mo(\000+)sh269.517 193.988 mo(\000\015)sh271.698 193.988 mo(\000\011)sh273.879 193.988 mo(\0000)sh278.848 193.988 mo(\000\013)sh283.894 193.988 mo(\000\007)sh288.677 193.988 mo(\000\014)sh291.48 193.988 mo(\000\020)sh296.2 193.988 mo(\000\011)sh298.381 193.988 mo(\000\017)sh301.777 193.988 mo(\000\013)sh306.824 193.988 mo(\000\003)sh310.967 193.988 mo(\000\014)sh313.771 193.988 mo(\000\021)sh318.911 193.988 mo(\0001)sh323.818 193.988 mo(\000\034)sh328.881 193.988 mo(\000\025)sh333.943 193.988 mo(\000\033)sh339.006 193.988 mo(\000\023)sh344.068 193.988 mo(\000\025)sh349.131 193.988 mo(\000\035)sh[.996923 1.99385 ] 0 dsh
188.919 200.935 mo
cp
.516472 .431495 .431495 .0754711 cmyk
@
[] 0 dsh
185.273 200.935 mo
188.919 200.935 li
.75021 .679683 .670222 .90164 cmyk
@
.516472 .431495 .431495 .0754711 cmyk
GTMNCQ+Verdana [6.97846 0 0 -6.97846 0 0 ]msf189.202 203.459 mo(\000\001)sh192.131 203.459 mo(\000\002)sh196.539 203.459 mo(\000\003)sh200.169 203.459 mo(\000\004)sh204.312 203.459 mo(\000\005)sh207.941 203.459 mo(\000\006)sh210.683 203.459 mo(\000\007)sh.75021 .679683 .670222 .90164 cmyk
GTMNCQ+Verdana [7.97538 0 0 -7.97538 0 0 ]msf225.092 203.957 mo(\000\()sh229.702 203.957 mo(\000\004)sh234.453 203.957 mo(\000\017)sh237.849 203.957 mo(\000\011)sh240.03 203.957 mo(\000\002)sh245.077 203.957 mo(\000\007)sh249.859 203.957 mo(\000\014)sh252.663 203.957 mo(\000\002)sh257.71 203.957 mo(\000\013)sh262.757 203.957 mo(\000!)sh267.726 203.957 mo(\000\007)sh272.508 203.957 mo(\000\014)sh275.312 203.957 mo(\000\020)sh280.031 203.957 mo(\000\011)sh282.212 203.957 mo(\000\017)sh285.608 203.957 mo(\000\013)sh290.655 203.957 mo(\000\003)sh294.798 203.957 mo(\000\014)sh297.602 203.957 mo(\000\021)sh303.054 203.957 mo(\000*)sh307.634 203.957 mo(\000\034)sh312.696 203.957 mo(\000\037)sh317.759 203.957 mo(\000\034)sh322.821 203.957 mo(\000&)sh327.884 203.957 mo(\000\035)sh332.946 203.957 mo(\000&)sh[.996923 1.99385 ] 0 dsh
189.111 210.905 mo
cp
.516472 .431495 .431495 .0754711 cmyk
@
[] 0 dsh
149.84 210.905 mo
189.111 210.905 li
.75021 .679683 .670222 .90164 cmyk
@
.516472 .431495 .431495 .0754711 cmyk
GTMNCQ+Verdana [6.97846 0 0 -6.97846 0 0 ]msf189.202 213.428 mo(\000\001)sh192.131 213.428 mo(\000\002)sh196.539 213.428 mo(\000\003)sh200.169 213.428 mo(\000\004)sh204.312 213.428 mo(\000\005)sh207.941 213.428 mo(\000\006)sh210.683 213.428 mo(\000\007)sh.75021 .679683 .670222 .90164 cmyk
GTMNCQ+Verdana [7.97538 0 0 -7.97538 0 0 ]msf225.092 213.927 mo(\000 )sh230.544 213.927 mo(\000\027)sh235.513 213.927 mo(\000\012)sh240.341 213.927 mo(\000!)sh245.31 213.927 mo(\000\012)sh250.139 213.927 mo(\000\027)sh255.108 213.927 mo(\000\006)sh258.239 213.927 mo(\000\004)sh262.99 213.927 mo(\000\017)sh266.246 213.927 mo(\000\007)sh271.028 213.927 mo(\000\014)sh273.832 213.927 mo(\000\004)sh278.583 213.927 mo(\000")sh283.303 213.927 mo(\000\011)sh285.483 213.927 mo(\000#)sh290.452 213.927 mo(\000\013)sh295.499 213.927 mo(\000\007)sh300.281 213.927 mo(\000\014)sh303.085 213.927 mo(\000\011)sh305.266 213.927 mo(\000\010)sh308.07 213.927 mo(\000\015)sh310.251 213.927 mo(\000\007)sh314.97 213.927 mo(\000\020)sh319.69 213.927 mo(\000\011)sh321.871 213.927 mo(\000\017)sh325.267 213.927 mo(\000\013)sh330.314 213.927 mo(\000\003)sh334.457 213.927 mo(\000\014)sh337.261 213.927 mo(\000\037)sh342.324 213.927 mo(\000\014)sh345.127 213.927 mo(\000$)sh348.741 213.927 mo(\000%)sh354.707 213.927 mo(\000\036)sh359.77 213.927 mo(\000&)sh364.832 213.927 mo(\000\023)sh369.895 213.927 mo(\000\036)sh374.957 213.927 mo(\000\035)sh380.02 213.927 mo(\000\036)sh38.8918 227.852 mo
38.8918 294.272 li
@
[.996923 1.99385 ] 0 dsh
39.3903 261.062 mo
38.3934 261.062 li
.516472 .431495 .431495 .0754711 cmyk
@
[] 0 dsh
19.9385 261.062 mo
39.3903 261.062 li
.75021 .679683 .670222 .90164 cmyk
@
.269749 1 1 .319921 cmyk
GTMNCP+ArialMT [7.97538 0 0 -7.97538 0 0 ]msf25.4334 268.773 mo(\000\001)sh29.8572 268.773 mo(\000\002)sh34.281 268.773 mo(\000\002)sh51.4791 220.375 mo
51.4791 236.326 li
.75021 .679683 .670222 .90164 cmyk
@
[.996923 1.99385 ] 0 dsh
51.9776 228.351 mo
50.9807 228.351 li
.516472 .431495 .431495 .0754711 cmyk
@
[] 0 dsh
39.3903 228.351 mo
51.9776 228.351 li
.75021 .679683 .670222 .90164 cmyk
@
.269749 1 1 .319921 cmyk
%ADOBeginSubsetFont: JAAAAA+ArialMT-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.ct_GlyphDirProcs begin/JAAAAA+ArialMT 1 GetGlyphDirectory7 <001C60D8A8C9B790A8417CCF81B27071A253145FD9133C4E3FBAE1A8D78E8A3664E0D56996546FD74BF96F7FF9B3AFAB73DAA539BD103A22F3B3E8F9628CD4A301CADC7AC3772D100AD12E1ADA814C075324A9D1683C00B06239210983CC7F98593EB1DE19BC67FB4007CF6CED740199F3F077EFCA5A895DECA386B5EFE81F4FFB5A491378C9412FF4E9470CD1BF> |!endend end
%ADOEndSubsetFont
GTMNCP+ArialMT [7.97538 0 0 -7.97538 0 0 ]msf43.0053 236.061 mo(\000\007)sh47.4291 236.061 mo(\000\002)sh[.996923 1.99385 ] 0 dsh
170.942 220.874 mo
cp
.516472 .431495 .431495 .0754711 cmyk
@
[] 0 dsh
51.9776 220.874 mo
170.942 220.874 li
.75021 .679683 .670222 .90164 cmyk
@
.516472 .431495 .431495 .0754711 cmyk
GTMNCQ+Verdana [6.97846 0 0 -6.97846 0 0 ]msf189.202 223.397 mo(\000\001)sh192.131 223.397 mo(\000\002)sh196.539 223.397 mo(\000\003)sh200.169 223.397 mo(\000\004)sh204.312 223.397 mo(\000\005)sh207.941 223.397 mo(\000\006)sh210.683 223.397 mo(\000\007)sh.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: KAAAAA+Verdana-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.ct_GlyphDirProcs begin/KAAAAA+Verdana 1 GetGlyphDirectory50 <001C60D8A8C9B6F715E85497913083001EF70BCF504990FE76A17D4EA1C9FDAF8A04397E5E264E5D08152FEB6D96914F5C62979108B1BD7FB53D9AE9EC1CC1DF04C39F6D04BA547B5C5ACBA291AB6AFF235F0633568777F62BAE2594F6DEC77DAA4CCC4C25CFDE67933B99E30AF5B70464DB03085C7D53511F7480DDEEDECA61D3957939EF5A1D439FFE9097EFF33E25350CE34D09> |!endend end
%ADOEndSubsetFont
GTMNCQ+Verdana [7.97538 0 0 -7.97538 0 0 ]msf225.092 223.896 mo(\0002)sh231.229 223.896 mo(\000\011)sh233.41 223.896 mo(\000\002)sh238.457 223.896 mo(\000\012)sh243.285 223.896 mo(\000\005)sh247.429 223.896 mo(\000\007)sh252.211 223.896 mo(\000-)sh259.968 223.896 mo(\000\027)sh264.937 223.896 mo(\000\013)sh269.984 223.896 mo(\000\003)sh274.128 223.896 mo(\000\014)sh276.932 223.896 mo(\000\005)sh281.075 223.896 mo(\000\012)sh285.904 223.896 mo(\000\005)sh290.047 223.896 mo(\000\005)sh294.191 223.896 mo(\000\011)sh296.372 223.896 mo(\000\002)sh301.419 223.896 mo(\000\004)sh306.169 223.896 mo(\000\015)sh308.35 223.896 mo(\000\015)sh310.531 223.896 mo(\000\007)sh315.313 223.896 mo(\000\004)sh320.064 223.896 mo(\000\014)sh322.868 223.896 mo(\000\027)sh327.837 223.896 mo(\000\007)sh332.619 223.896 mo(\000\017)sh335.875 223.896 mo(\000\007)sh340.657 223.896 mo(\000\015)sh342.838 223.896 mo(\000\))sh347.557 223.896 mo(\000\003)sh351.701 223.896 mo(\000\011)sh353.882 223.896 mo(\000\003)sh358.025 223.896 mo(\000\014)sh360.829 223.896 mo(\000\020)sh365.549 223.896 mo(\000\011)sh367.729 223.896 mo(\000\017)sh371.125 223.896 mo(\000\013)sh376.172 223.896 mo(\000\003)sh380.316 223.896 mo(\000\014)sh383.119 223.896 mo(\000\031)sh388.634 223.896 mo(\000*)sh393.213 223.896 mo(\000\036)sh398.276 223.896 mo(\000\035)sh403.338 223.896 mo(\000\034)sh408.401 223.896 mo(\000\036)sh413.463 223.896 mo(\000\037)sh418.526 223.896 mo(\000\037)sh123.696 230.345 mo
123.696 241.311 li
@
[.996923 1.99385 ] 0 dsh
124.195 235.828 mo
123.198 235.828 li
.516472 .431495 .431495 .0754711 cmyk
@
[] 0 dsh
51.9776 235.828 mo
124.195 235.828 li
.75021 .679683 .670222 .90164 cmyk
@
.269749 1 1 .319921 cmyk
GTMNCP+ArialMT [7.97538 0 0 -7.97538 0 0 ]msf110.238 243.538 mo(\000\001)sh114.662 243.538 mo(\000\002)sh119.085 243.538 mo(\000\002)sh[.996923 1.99385 ] 0 dsh
151.555 230.843 mo
cp
.516472 .431495 .431495 .0754711 cmyk
@
[] 0 dsh
124.195 230.843 mo
151.555 230.843 li
.75021 .679683 .670222 .90164 cmyk
@
.516472 .431495 .431495 .0754711 cmyk
GTMNCQ+Verdana [6.97846 0 0 -6.97846 0 0 ]msf189.202 233.367 mo(\000\001)sh192.131 233.367 mo(\000\002)sh196.539 233.367 mo(\000\003)sh200.169 233.367 mo(\000\004)sh204.312 233.367 mo(\000\005)sh207.941 233.367 mo(\000\006)sh210.683 233.367 mo(\000\007)sh.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: KAAAAA+Verdana-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.ct_GlyphDirProcs begin/KAAAAA+Verdana 2 GetGlyphDirectory51 <001C60D8A8C9B62D3B27EE04A08E6B15ADA340672370E1F937D94AAFBB243CE9A19172C14B80CEE637F0DA8AD36161D2571692FB390D202143F7AADECF4FF98F959E3B5A0BBB05823A555700CF2B615E66B575A2F5929A734CA03DE28AEB0D5F0D905B29E084D531AA094658635C195C60378D5166EB0FB3D90671049323401CE9A088FDB1CB9832D84C088CBCF787D940281E49A4FA6753610FADDC631C88029E58922B4B634597278E6F98703035950368DAE3D74023B454116E83D459A6F2D12CFA041D4F1D203EE9E5DC5F> |52 <001C60D8A8C9B6FB5FDFECE3D5B342CD656CA2B5B6ADEAC7BF3686A414A7B6AE48A4C4AB35CFA0FA771DA5A3480A6523BDF5450EDC8361ED0AE8A570BC6B6DDE803EAD4E65F4B0D8F8D54207C9158FD620D671C852DE160DC20D2F162469B9419E5B21F082252E2F9CE45D4791D6CB3324EF70C6E5A1CE2D64924958604A39ED628D6017A863D2B535D8222374BFCEB2CBE3C96CFA1DCAB351380EFBE8366FE20BDB2361AB7DA8CE5870A8ECB6D5> |!endend end
%ADOEndSubsetFont
GTMNCQ+Verdana [7.97538 0 0 -7.97538 0 0 ]msf225.092 233.865 mo(\0003)sh230.653 233.865 mo(\000\004)sh235.404 233.865 mo(\000\017)sh238.659 233.865 mo(\000\007)sh243.441 233.865 mo(\000\006)sh246.572 233.865 mo(\000\011)sh248.753 233.865 mo(\000\006)sh251.884 233.865 mo(\000\011)sh254.065 233.865 mo(\000\003)sh258.208 233.865 mo(\000\014)sh261.012 233.865 mo(\000\005)sh265.155 233.865 mo(\000\007)sh269.938 233.865 mo(\000\027)sh274.907 233.865 mo(\000\011)sh277.087 233.865 mo(\000\006)sh280.218 233.865 mo(\000\007)sh285 233.865 mo(\000\006)sh288.131 233.865 mo(\000\007)sh292.914 233.865 mo(\000\014)sh295.717 233.865 mo(\000\011)sh297.898 233.865 mo(\000\010)sh300.702 233.865 mo(\000\015)sh302.883 233.865 mo(\000\007)sh307.603 233.865 mo(\000\020)sh312.322 233.865 mo(\000\011)sh314.503 233.865 mo(\000\017)sh317.899 233.865 mo(\000\013)sh322.946 233.865 mo(\000\003)sh327.089 233.865 mo(\000\014)sh329.893 233.865 mo(\000\030)sh334.956 233.865 mo(\000\014)sh337.759 233.865 mo(\0004)sh343.944 233.865 mo(\000\021)sh349.395 233.865 mo(\000.)sh356.109 233.865 mo(\0003)sh361.67 233.865 mo(\000\023)sh366.733 233.865 mo(\000\030)sh371.795 233.865 mo(\000\023)sh376.858 233.865 mo(\000\023)sh381.92 233.865 mo(\000\030)sh386.983 233.865 mo(\000\024)sh392.045 233.865 mo(\000\037)sh397.108 233.865 mo(\000\023)sh[.996923 1.99385 ] 0 dsh
151.548 240.812 mo
cp
.516472 .431495 .431495 .0754711 cmyk
@
[] 0 dsh
124.195 240.812 mo
151.548 240.812 li
.75021 .679683 .670222 .90164 cmyk
@
.516472 .431495 .431495 .0754711 cmyk
GTMNCQ+Verdana [6.97846 0 0 -6.97846 0 0 ]msf189.202 243.336 mo(\000\001)sh192.131 243.336 mo(\000\002)sh196.539 243.336 mo(\000\003)sh200.169 243.336 mo(\000\004)sh204.312 243.336 mo(\000\005)sh207.941 243.336 mo(\000\006)sh210.683 243.336 mo(\000\007)sh.75021 .679683 .670222 .90164 cmyk
GTMNCQ+Verdana [7.97538 0 0 -7.97538 0 0 ]msf225.092 243.834 mo(\0003)sh230.653 243.834 mo(\000\004)sh235.404 243.834 mo(\000\017)sh238.659 243.834 mo(\000\007)sh243.441 243.834 mo(\000\006)sh246.572 243.834 mo(\000\011)sh248.753 243.834 mo(\000\006)sh251.884 243.834 mo(\000\011)sh254.065 243.834 mo(\000\003)sh258.208 243.834 mo(\000\014)sh261.012 243.834 mo(\000\005)sh265.155 243.834 mo(\000\007)sh269.938 243.834 mo(\000\027)sh274.907 243.834 mo(\000\011)sh277.087 243.834 mo(\000\006)sh280.218 243.834 mo(\000\007)sh285 243.834 mo(\000\006)sh288.131 243.834 mo(\000\007)sh292.914 243.834 mo(\000\014)sh295.717 243.834 mo(\000\011)sh297.898 243.834 mo(\000\010)sh300.702 243.834 mo(\000\015)sh302.883 243.834 mo(\000\007)sh307.603 243.834 mo(\000\020)sh312.322 243.834 mo(\000\011)sh314.503 243.834 mo(\000\017)sh317.899 243.834 mo(\000\013)sh322.946 243.834 mo(\000\003)sh327.089 243.834 mo(\000\014)sh329.893 243.834 mo(\000\037)sh334.956 243.834 mo(\000\014)sh337.759 243.834 mo(\0004)sh343.944 243.834 mo(\000\021)sh349.395 243.834 mo(\000.)sh356.109 243.834 mo(\0003)sh361.67 243.834 mo(\000\023)sh366.733 243.834 mo(\000\030)sh371.795 243.834 mo(\000\023)sh376.858 243.834 mo(\000\037)sh381.92 243.834 mo(\000\023)sh386.983 243.834 mo(\000\025)sh392.045 243.834 mo(\000\023)sh397.108 243.834 mo(\000\037)sh47.8641 271.468 mo
47.8641 316.08 li
@
[.996923 1.99385 ] 0 dsh
48.2929 293.774 mo
47.3657 293.774 li
.516472 .431495 .431495 .0754711 cmyk
@
[] 0 dsh
39.3903 293.774 mo
48.2929 293.774 li
.75021 .679683 .670222 .90164 cmyk
@
.269749 1 1 .319921 cmyk
GTMNCP+ArialMT [7.97538 0 0 -7.97538 0 0 ]msf39.3903 301.484 mo(\000\005)sh43.8141 301.484 mo(\000\003)sh79.0986 262.745 mo
79.0986 281.188 li
.75021 .679683 .670222 .90164 cmyk
@
[.996923 1.99385 ] 0 dsh
79.5971 271.966 mo
78.6002 271.966 li
.516472 .431495 .431495 .0754711 cmyk
@
[] 0 dsh
48.3626 271.966 mo
79.5971 271.966 li
.75021 .679683 .670222 .90164 cmyk
@
.269749 1 1 .319921 cmyk
GTMNCP+ArialMT [7.97538 0 0 -7.97538 0 0 ]msf65.6402 279.677 mo(\000\001)sh70.064 279.677 mo(\000\002)sh74.4879 279.677 mo(\000\002)sh114.783 255.268 mo
114.783 271.218 li
.75021 .679683 .670222 .90164 cmyk
@
[.996923 1.99385 ] 0 dsh
115.282 263.243 mo
114.285 263.243 li
.516472 .431495 .431495 .0754711 cmyk
@
[] 0 dsh
79.5971 263.243 mo
115.282 263.243 li
.75021 .679683 .670222 .90164 cmyk
@
.269749 1 1 .319921 cmyk
GTMNCP+ArialMT [7.97538 0 0 -7.97538 0 0 ]msf101.325 270.954 mo(\000\001)sh105.748 270.954 mo(\000\002)sh110.172 270.954 mo(\000\002)sh136.805 250.283 mo
136.805 261.249 li
.75021 .679683 .670222 .90164 cmyk
@
[.996923 1.99385 ] 0 dsh
137.303 255.766 mo
136.306 255.766 li
.516472 .431495 .431495 .0754711 cmyk
@
[] 0 dsh
115.282 255.766 mo
137.303 255.766 li
.75021 .679683 .670222 .90164 cmyk
@
.269749 1 1 .319921 cmyk
GTMNCP+ArialMT [7.97538 0 0 -7.97538 0 0 ]msf123.346 263.477 mo(\000\001)sh127.77 263.477 mo(\000\002)sh132.194 263.477 mo(\000\002)sh[.996923 1.99385 ] 0 dsh
137.444 250.782 mo
cp
.516472 .431495 .431495 .0754711 cmyk
@
[] 0 dsh
137.303 250.782 mo
137.444 250.782 li
.75021 .679683 .670222 .90164 cmyk
@
.516472 .431495 .431495 .0754711 cmyk
GTMNCQ+Verdana [6.97846 0 0 -6.97846 0 0 ]msf189.202 253.305 mo(\000\001)sh192.131 253.305 mo(\000\002)sh196.539 253.305 mo(\000\003)sh200.169 253.305 mo(\000\004)sh204.312 253.305 mo(\000\005)sh207.941 253.305 mo(\000\006)sh210.683 253.305 mo(\000\007)sh.75021 .679683 .670222 .90164 cmyk
GTMNCQ+Verdana [7.97538 0 0 -7.97538 0 0 ]msf225.092 253.803 mo(\000')sh229.531 253.803 mo(\000\007)sh234.313 253.803 mo(\000\012)sh239.142 253.803 mo(\000!)sh244.111 253.803 mo(\000\004)sh248.862 253.803 mo(\000\015)sh251.043 253.803 mo(\000\027)sh256.012 253.803 mo(\000\016)sh261.059 253.803 mo(\000\007)sh265.841 253.803 mo(\000")sh270.561 253.803 mo(\000\014)sh273.364 253.803 mo(\000\003)sh277.508 253.803 mo(\000\006)sh280.639 253.803 mo(\000\017)sh284.035 253.803 mo(\000\011)sh286.215 253.803 mo(\000\007)sh290.998 253.803 mo(\000\006)sh294.129 253.803 mo(\000\004)sh298.879 253.803 mo(\000\015)sh301.06 253.803 mo(\000\015)sh303.241 253.803 mo(\000\013)sh308.288 253.803 mo(\000\003)sh312.431 253.803 mo(\000\014)sh315.235 253.803 mo(\000\011)sh317.416 253.803 mo(\000\010)sh320.22 253.803 mo(\000\015)sh322.401 253.803 mo(\000\007)sh327.12 253.803 mo(\000\020)sh331.84 253.803 mo(\000\011)sh334.021 253.803 mo(\000\017)sh337.417 253.803 mo(\000\013)sh342.464 253.803 mo(\000\003)sh346.607 253.803 mo(\000\014)sh349.411 253.803 mo(\000\037)sh354.473 253.803 mo(\000\014)sh357.277 253.803 mo(\000\031)sh362.792 253.803 mo(\000.)sh369.505 253.803 mo(\000\037)sh374.568 253.803 mo(\000&)sh379.63 253.803 mo(\000\037)sh384.693 253.803 mo(\000\025)sh389.755 253.803 mo(\000\037)sh394.818 253.803 mo(\000\036)sh[.996923 1.99385 ] 0 dsh
137.826 260.751 mo
cp
.516472 .431495 .431495 .0754711 cmyk
@
[] 0 dsh
137.303 260.751 mo
137.826 260.751 li
.75021 .679683 .670222 .90164 cmyk
@
.516472 .431495 .431495 .0754711 cmyk
GTMNCQ+Verdana [6.97846 0 0 -6.97846 0 0 ]msf189.202 263.274 mo(\000\001)sh192.131 263.274 mo(\000\002)sh196.539 263.274 mo(\000\003)sh200.169 263.274 mo(\000\004)sh204.312 263.274 mo(\000\005)sh207.941 263.274 mo(\000\006)sh210.683 263.274 mo(\000\007)sh.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: KAAAAA+Verdana-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.ct_GlyphDirProcs begin/KAAAAA+Verdana 1 GetGlyphDirectory53 <001C60D8A8C9B6A4264FA6E394BA57D74D715799A826E822E6A4D8C3C0139C8B480125E145BF87327AEA63CC890C7315F46460969B182ED2AF0857E16102> |!endend end
%ADOEndSubsetFont
GTMNCQ+Verdana [7.97538 0 0 -7.97538 0 0 ]msf225.092 263.773 mo(\000')sh229.531 263.773 mo(\000\007)sh234.313 263.773 mo(\000\012)sh239.142 263.773 mo(\000!)sh244.111 263.773 mo(\000\004)sh248.862 263.773 mo(\000\015)sh251.043 263.773 mo(\000\027)sh256.012 263.773 mo(\000\016)sh261.059 263.773 mo(\000\007)sh265.841 263.773 mo(\000")sh270.561 263.773 mo(\000\014)sh273.364 263.773 mo(\000\003)sh277.508 263.773 mo(\000\006)sh280.639 263.773 mo(\000\017)sh284.035 263.773 mo(\000\011)sh286.215 263.773 mo(\000\007)sh290.998 263.773 mo(\000\006)sh294.129 263.773 mo(\000\004)sh298.879 263.773 mo(\000\015)sh301.06 263.773 mo(\000\015)sh303.241 263.773 mo(\000\007)sh308.023 263.773 mo(\000\014)sh310.827 263.773 mo(\000\016)sh315.874 263.773 mo(\000\012)sh320.703 263.773 mo(\000\002)sh325.75 263.773 mo(\000\004)sh330.501 263.773 mo(\000\))sh335.174 263.773 mo(\000!)sh340.143 263.773 mo(\000\004)sh344.894 263.773 mo(\0005)sh351.42 263.773 mo(\000\014)sh354.224 263.773 mo(\000\020)sh358.944 263.773 mo(\000\011)sh361.125 263.773 mo(\000\017)sh364.521 263.773 mo(\000\013)sh369.568 263.773 mo(\000\003)sh373.711 263.773 mo(\000\014)sh376.515 263.773 mo(\000\030)sh381.577 263.773 mo(\000\014)sh384.381 263.773 mo(\000\031)sh389.895 263.773 mo(\000*)sh394.475 263.773 mo(\000\024)sh399.538 263.773 mo(\000\034)sh404.6 263.773 mo(\000\035)sh409.663 263.773 mo(\000\035)sh414.725 263.773 mo(\000\024)sh419.788 263.773 mo(\000\030)sh[.996923 1.99385 ] 0 dsh
137.782 270.72 mo
cp
.516472 .431495 .431495 .0754711 cmyk
@
[] 0 dsh
115.282 270.72 mo
137.782 270.72 li
.75021 .679683 .670222 .90164 cmyk
@
.516472 .431495 .431495 .0754711 cmyk
GTMNCQ+Verdana [6.97846 0 0 -6.97846 0 0 ]msf189.202 273.243 mo(\000\001)sh192.131 273.243 mo(\000\002)sh196.539 273.243 mo(\000\003)sh200.169 273.243 mo(\000\004)sh204.312 273.243 mo(\000\005)sh207.941 273.243 mo(\000\006)sh210.683 273.243 mo(\000\007)sh.75021 .679683 .670222 .90164 cmyk
GTMNCQ+Verdana [7.97538 0 0 -7.97538 0 0 ]msf225.092 273.742 mo(\000%)sh231.058 273.742 mo(\000\011)sh233.238 273.742 mo(\000\015)sh235.419 273.742 mo(\000\007)sh240.201 273.742 mo(\000\027)sh245.17 273.742 mo(\000\007)sh249.952 273.742 mo(\000\017)sh253.348 273.742 mo(\000\020)sh257.912 273.742 mo(\000\007)sh262.694 273.742 mo(\000\006)sh265.825 273.742 mo(\000\007)sh270.607 273.742 mo(\000\014)sh273.411 273.742 mo(\000\015)sh275.592 273.742 mo(\000\013)sh280.639 273.742 mo(\000#)sh285.608 273.742 mo(\000\004)sh290.359 273.742 mo(\000\002)sh295.406 273.742 mo(\000\003)sh299.549 273.742 mo(\000\014)sh302.353 273.742 mo(\000\016)sh307.4 273.742 mo(\000\012)sh312.229 273.742 mo(\000\002)sh317.276 273.742 mo(\000\004)sh322.027 273.742 mo(\000\))sh326.7 273.742 mo(\000!)sh331.669 273.742 mo(\000\004)sh336.42 273.742 mo(\0005)sh342.947 273.742 mo(\000\014)sh345.75 273.742 mo(\000\020)sh350.47 273.742 mo(\000\011)sh352.651 273.742 mo(\000\017)sh356.047 273.742 mo(\000\013)sh361.094 273.742 mo(\000\003)sh365.237 273.742 mo(\000\014)sh368.041 273.742 mo(\000\030)sh373.104 273.742 mo(\000\014)sh375.907 273.742 mo(\000\021)sh381.359 273.742 mo(\000\022)sh386.827 273.742 mo(\000&)sh391.889 273.742 mo(\000\025)sh396.952 273.742 mo(\000\025)sh402.014 273.742 mo(\000\037)sh407.077 273.742 mo(\000\033)sh412.139 273.742 mo(\000\024)sh[.996923 1.99385 ] 0 dsh
163.116 280.689 mo
cp
.516472 .431495 .431495 .0754711 cmyk
@
[] 0 dsh
79.5971 280.689 mo
163.116 280.689 li
.75021 .679683 .670222 .90164 cmyk
@
.516472 .431495 .431495 .0754711 cmyk
GTMNCQ+Verdana [6.97846 0 0 -6.97846 0 0 ]msf189.202 283.213 mo(\000\001)sh192.131 283.213 mo(\000\002)sh196.539 283.213 mo(\000\003)sh200.169 283.213 mo(\000\004)sh204.312 283.213 mo(\000\005)sh207.941 283.213 mo(\000\006)sh210.683 283.213 mo(\000\007)sh.75021 .679683 .670222 .90164 cmyk
GTMNCQ+Verdana [7.97538 0 0 -7.97538 0 0 ]msf225.092 283.711 mo(\000%)sh231.058 283.711 mo(\000\011)sh233.238 283.711 mo(\000\015)sh235.419 283.711 mo(\000\007)sh240.201 283.711 mo(\000\027)sh245.17 283.711 mo(\000\007)sh249.952 283.711 mo(\000\017)sh253.348 283.711 mo(\000\020)sh257.912 283.711 mo(\000\007)sh262.694 283.711 mo(\000\006)sh265.825 283.711 mo(\000\007)sh270.607 283.711 mo(\000\014)sh273.411 283.711 mo(\000\015)sh275.592 283.711 mo(\000\013)sh280.639 283.711 mo(\000#)sh285.608 283.711 mo(\000\004)sh290.359 283.711 mo(\000\002)sh295.406 283.711 mo(\000\003)sh299.549 283.711 mo(\000\014)sh302.353 283.711 mo(\000\016)sh307.4 283.711 mo(\000\012)sh312.229 283.711 mo(\000\002)sh317.276 283.711 mo(\000\004)sh322.027 283.711 mo(\000\))sh326.7 283.711 mo(\000!)sh331.669 283.711 mo(\000\004)sh336.42 283.711 mo(\0005)sh342.947 283.711 mo(\000\014)sh345.75 283.711 mo(\000\020)sh350.47 283.711 mo(\000\011)sh352.651 283.711 mo(\000\017)sh356.047 283.711 mo(\000\013)sh361.094 283.711 mo(\000\003)sh365.237 283.711 mo(\000\014)sh368.041 283.711 mo(\000\037)sh373.104 283.711 mo(\000\014)sh375.907 283.711 mo(\000\021)sh381.359 283.711 mo(\000\022)sh386.827 283.711 mo(\000\036)sh391.889 283.711 mo(\000\037)sh396.952 283.711 mo(\000\025)sh402.014 283.711 mo(\000\035)sh407.077 283.711 mo(\000\033)sh412.139 283.711 mo(\000\024)sh56.8364 290.16 mo
56.8364 341.003 li
@
[.996923 1.99385 ] 0 dsh
56.1026 315.582 mo
56.338 315.582 li
.516472 .431495 .431495 .0754711 cmyk
@
[] 0 dsh
48.3626 315.582 mo
56.1026 315.582 li
.75021 .679683 .670222 .90164 cmyk
@
.269749 1 1 .319921 cmyk
GTMNCP+ArialMT [7.97538 0 0 -7.97538 0 0 ]msf48.3626 323.292 mo(\000\007)sh52.7864 323.292 mo(\000\003)sh[.996923 1.99385 ] 0 dsh
140.981 290.658 mo
cp
.516472 .431495 .431495 .0754711 cmyk
@
[] 0 dsh
57.3349 290.658 mo
140.981 290.658 li
.75021 .679683 .670222 .90164 cmyk
@
.516472 .431495 .431495 .0754711 cmyk
GTMNCQ+Verdana [6.97846 0 0 -6.97846 0 0 ]msf189.202 293.182 mo(\000\001)sh192.131 293.182 mo(\000\002)sh196.539 293.182 mo(\000\003)sh200.169 293.182 mo(\000\004)sh204.312 293.182 mo(\000\005)sh207.941 293.182 mo(\000\006)sh210.683 293.182 mo(\000\007)sh.75021 .679683 .670222 .90164 cmyk
GTMNCQ+Verdana [7.97538 0 0 -7.97538 0 0 ]msf225.092 293.68 mo(\000\022)sh230.559 293.68 mo(\000\017)sh233.955 293.68 mo(\000\004)sh238.706 293.68 mo(\000\020)sh243.426 293.68 mo(\000\011)sh245.606 293.68 mo(\000\005)sh249.75 293.68 mo(\000\012)sh254.579 293.68 mo(\000\017)sh257.974 293.68 mo(\000\))sh262.694 293.68 mo(\000\002)sh267.741 293.68 mo(\000\004)sh272.492 293.68 mo(\000\014)sh275.296 293.68 mo(\000+)sh280.265 293.68 mo(\000\017)sh283.521 293.68 mo(\000\007)sh288.303 293.68 mo(\000\003)sh292.446 293.68 mo(\000\003)sh296.59 293.68 mo(\000\011)sh298.77 293.68 mo(\000\005)sh302.914 293.68 mo(\000\007)sh307.696 293.68 mo(\000\004)sh312.447 293.68 mo(\000\014)sh315.251 293.68 mo(\000\020)sh319.971 293.68 mo(\000\011)sh322.151 293.68 mo(\000\017)sh325.547 293.68 mo(\000\013)sh330.594 293.68 mo(\000\003)sh334.738 293.68 mo(\000\014)sh337.541 293.68 mo(\000/)sh342.573 293.68 mo(\000*)sh347.152 293.68 mo(\000\033)sh352.215 293.68 mo(\000\030)sh357.277 293.68 mo(\000&)sh362.34 293.68 mo(\000\037)sh367.402 293.68 mo(\000&)sh372.465 293.68 mo(\000&)sh66.3646 307.606 mo
66.3646 373.403 li
@
[.996923 1.99385 ] 0 dsh
66.8631 340.505 mo
65.8661 340.505 li
.516472 .431495 .431495 .0754711 cmyk
@
[] 0 dsh
57.3349 340.505 mo
66.8631 340.505 li
.75021 .679683 .670222 .90164 cmyk
@
.269749 1 1 .319921 cmyk
GTMNCP+ArialMT [7.97538 0 0 -7.97538 0 0 ]msf57.8908 348.215 mo(\000\006)sh62.3146 348.215 mo(\000\002)sh96.4382 300.129 mo
96.4382 316.08 li
.75021 .679683 .670222 .90164 cmyk
@
[.996923 1.99385 ] 0 dsh
96.9367 308.105 mo
95.9398 308.105 li
.516472 .431495 .431495 .0754711 cmyk
@
[] 0 dsh
66.8631 308.105 mo
96.9367 308.105 li
.75021 .679683 .670222 .90164 cmyk
@
.269749 1 1 .319921 cmyk
GTMNCP+ArialMT [7.97538 0 0 -7.97538 0 0 ]msf82.9798 315.815 mo(\000\001)sh87.4036 315.815 mo(\000\002)sh91.8275 315.815 mo(\000\002)sh[.996923 1.99385 ] 0 dsh
150.895 300.628 mo
cp
.516472 .431495 .431495 .0754711 cmyk
@
[] 0 dsh
96.9367 300.628 mo
150.895 300.628 li
.75021 .679683 .670222 .90164 cmyk
@
.516472 .431495 .431495 .0754711 cmyk
GTMNCQ+Verdana [6.97846 0 0 -6.97846 0 0 ]msf189.202 303.151 mo(\000\001)sh192.131 303.151 mo(\000\002)sh196.539 303.151 mo(\000\003)sh200.169 303.151 mo(\000\004)sh204.312 303.151 mo(\000\005)sh207.941 303.151 mo(\000\006)sh210.683 303.151 mo(\000\007)sh.75021 .679683 .670222 .90164 cmyk
GTMNCQ+Verdana [7.97538 0 0 -7.97538 0 0 ]msf225.092 303.65 mo(\0004)sh231.276 303.65 mo(\000\017)sh234.531 303.65 mo(\000\007)sh239.313 303.65 mo(\000-)sh247.071 303.65 mo(\000\011)sh249.251 303.65 mo(\000\002)sh254.298 303.65 mo(\000\004)sh259.049 303.65 mo(\000\015)sh261.23 303.65 mo(\000\015)sh263.411 303.65 mo(\000\007)sh268.193 303.65 mo(\000\014)sh270.997 303.65 mo(\000\002)sh276.044 303.65 mo(\000\011)sh278.224 303.65 mo(\000#)sh283.194 303.65 mo(\000\017)sh286.589 303.65 mo(\000\011)sh288.77 303.65 mo(\000\010)sh291.574 303.65 mo(\000\017)sh294.97 303.65 mo(\000\012)sh299.798 303.65 mo(\000\002)sh304.845 303.65 mo(\000\003)sh308.989 303.65 mo(\000\014)sh311.793 303.65 mo(\000\020)sh316.513 303.65 mo(\000\011)sh318.693 303.65 mo(\000\017)sh322.089 303.65 mo(\000\013)sh327.136 303.65 mo(\000\003)sh331.279 303.65 mo(\000\014)sh334.083 303.65 mo(\000\030)sh339.146 303.65 mo(\000\014)sh341.95 303.65 mo(\000\031)sh347.464 303.65 mo(\000\()sh352.262 303.65 mo(\000\036)sh357.324 303.65 mo(\000\025)sh362.387 303.65 mo(\000\025)sh367.449 303.65 mo(\000&)sh372.512 303.65 mo(\000\024)sh377.574 303.65 mo(\000\037)sh121.218 310.098 mo
121.218 321.065 li
@
[.996923 1.99385 ] 0 dsh
121.717 315.582 mo
120.72 315.582 li
.516472 .431495 .431495 .0754711 cmyk
@
[] 0 dsh
96.9367 315.582 mo
121.717 315.582 li
.75021 .679683 .670222 .90164 cmyk
@
.269749 1 1 .319921 cmyk
GTMNCP+ArialMT [7.97538 0 0 -7.97538 0 0 ]msf107.76 323.292 mo(\000\001)sh112.183 323.292 mo(\000\002)sh116.607 323.292 mo(\000\002)sh[.996923 1.99385 ] 0 dsh
155.771 310.597 mo
cp
.516472 .431495 .431495 .0754711 cmyk
@
[] 0 dsh
121.717 310.597 mo
155.771 310.597 li
.75021 .679683 .670222 .90164 cmyk
@
.516472 .431495 .431495 .0754711 cmyk
GTMNCQ+Verdana [6.97846 0 0 -6.97846 0 0 ]msf189.202 313.12 mo(\000\001)sh192.131 313.12 mo(\000\002)sh196.539 313.12 mo(\000\003)sh200.169 313.12 mo(\000\004)sh204.312 313.12 mo(\000\005)sh207.941 313.12 mo(\000\006)sh210.683 313.12 mo(\000\007)sh.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: KAAAAA+Verdana-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.ct_GlyphDirProcs begin/KAAAAA+Verdana 1 GetGlyphDirectory54 <001C60D8A8C9B7CC0BB90E424794B7BE973B499E225B929516CACB45B020035C03B4318DEE1AB8DF6790F83CD3FA39FCA31F5CFEE9> |!endend end
%ADOEndSubsetFont
GTMNCQ+Verdana [7.97538 0 0 -7.97538 0 0 ]msf225.092 313.619 mo(\000.)sh231.805 313.619 mo(\000\012)sh236.634 313.619 mo(\0006)sh241.354 313.619 mo(\000\013)sh246.401 313.619 mo(\000\014)sh249.205 313.619 mo(\000\020)sh253.924 313.619 mo(\000\011)sh256.105 313.619 mo(\000\017)sh259.501 313.619 mo(\000\013)sh264.548 313.619 mo(\000\003)sh268.691 313.619 mo(\000\014)sh271.495 313.619 mo(\000%)sh277.461 313.619 mo(\0003)sh283.022 313.619 mo(\000\023)sh288.085 313.619 mo(\000\034)sh293.147 313.619 mo(\000\030)sh298.21 313.619 mo(\000\034)sh303.272 313.619 mo(\000\034)sh308.335 313.619 mo(\000\036)sh[.996923 1.99385 ] 0 dsh
156.62 320.566 mo
cp
.516472 .431495 .431495 .0754711 cmyk
@
[] 0 dsh
121.717 320.566 mo
156.62 320.566 li
.75021 .679683 .670222 .90164 cmyk
@
.516472 .431495 .431495 .0754711 cmyk
GTMNCQ+Verdana [6.97846 0 0 -6.97846 0 0 ]msf189.202 323.09 mo(\000\001)sh192.131 323.09 mo(\000\002)sh196.539 323.09 mo(\000\003)sh200.169 323.09 mo(\000\004)sh204.312 323.09 mo(\000\005)sh207.941 323.09 mo(\000\006)sh210.683 323.09 mo(\000\007)sh.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: KAAAAA+Verdana-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.ct_GlyphDirProcs begin/KAAAAA+Verdana 1 GetGlyphDirectory55 <001C60D8A8C9B60F085F06527B707B6CAFEC501DF04A5DC84AA929F1464C977B0818749D1CB9D60F4AEA897CA7B0DAFEA50C742C279E2F2E8B80BCACB6DBC5BB3C7D6D18C0624DE01E08FE44580ECDE467A305560765AEE1A67D569170C262422A2E9940506109D710B0EF79CCBB0BAF90BF40166AC7F8AC7AE6448BD81198C7A95C85FB0479FDBA7A24189426> |!endend end
%ADOEndSubsetFont
GTMNCQ+Verdana [7.97538 0 0 -7.97538 0 0 ]msf225.092 323.588 mo(\000 )sh230.544 323.588 mo(\000\015)sh232.724 323.588 mo(\000\012)sh237.553 323.588 mo(\0005)sh244.08 323.588 mo(\000\014)sh246.884 323.588 mo(\000+)sh251.853 323.588 mo(\000\004)sh256.604 323.588 mo(\000\004)sh261.355 323.588 mo(\000\014)sh264.159 323.588 mo(\000\027)sh269.128 323.588 mo(\000\007)sh273.91 323.588 mo(\000\017)sh277.165 323.588 mo(\000\007)sh281.947 323.588 mo(\000\015)sh284.128 323.588 mo(\000\))sh288.848 323.588 mo(\000\003)sh292.991 323.588 mo(\000\011)sh295.172 323.588 mo(\000\003)sh299.316 323.588 mo(\000\014)sh302.119 323.588 mo(\000\020)sh306.839 323.588 mo(\000\011)sh309.02 323.588 mo(\000\017)sh312.416 323.588 mo(\000\013)sh317.463 323.588 mo(\000\003)sh321.606 323.588 mo(\000\014)sh324.41 323.588 mo(\000/)sh329.441 323.588 mo(\0007)sh335.267 323.588 mo(\000\023)sh340.33 323.588 mo(\000\034)sh345.392 323.588 mo(\000\033)sh350.455 323.588 mo(\000\025)sh355.517 323.588 mo(\000\030)sh360.58 323.588 mo(\000\025)sh80.3215 340.629 mo
80.3215 405.18 li
@
[.996923 1.99385 ] 0 dsh
80.7067 372.905 mo
79.8231 372.905 li
.516472 .431495 .431495 .0754711 cmyk
@
[] 0 dsh
66.8631 372.905 mo
80.7067 372.905 li
.75021 .679683 .670222 .90164 cmyk
@
.269749 1 1 .319921 cmyk
GTMNCP+ArialMT [7.97538 0 0 -7.97538 0 0 ]msf66.8631 380.615 mo(\000\001)sh71.2869 380.615 mo(\000\002)sh75.7108 380.615 mo(\000\002)sh89.2938 330.037 mo
89.2938 352.218 li
.75021 .679683 .670222 .90164 cmyk
@
[.996923 1.99385 ] 0 dsh
87.9506 341.128 mo
88.7954 341.128 li
.516472 .431495 .431495 .0754711 cmyk
@
[] 0 dsh
80.82 341.128 mo
87.9506 341.128 li
.75021 .679683 .670222 .90164 cmyk
@
.269749 1 1 .319921 cmyk
GTMNCP+ArialMT [7.97538 0 0 -7.97538 0 0 ]msf80.82 348.838 mo(\000\007)sh85.2438 348.838 mo(\000\007)sh[.996923 1.99385 ] 0 dsh
157.917 330.535 mo
cp
.516472 .431495 .431495 .0754711 cmyk
@
[] 0 dsh
89.7923 330.535 mo
157.917 330.535 li
.75021 .679683 .670222 .90164 cmyk
@
.516472 .431495 .431495 .0754711 cmyk
GTMNCQ+Verdana [6.97846 0 0 -6.97846 0 0 ]msf189.202 333.059 mo(\000.)sh195.075 333.059 mo(\000\007)sh199.265 333.059 mo(\000-)sh206.041 333.059 mo(\000-)sh212.817 333.059 mo(\000\007)sh217.007 333.059 mo(\000\015)sh218.908 333.059 mo(\000\011)sh220.808 333.059 mo(\000\007)sh.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: KAAAAA+Verdana-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.ct_GlyphDirProcs begin/KAAAAA+Verdana 1 GetGlyphDirectory56 <001C60D8A8C9B65EB4067318729685954453B334E8902DDCEB16E5EF3EFBF905B6CEC1422B938968307EED0F495536983968AD0A3DEA60E550EBF78DA033B2E8> |!endend end
%ADOEndSubsetFont
GTMNCQ+Verdana [7.97538 0 0 -7.97538 0 0 ]msf225.092 333.557 mo(\000\031)sh230.606 333.557 mo(\000\011)sh232.787 333.557 mo(\000\002)sh237.834 333.557 mo(\000#)sh242.803 333.557 mo(\000\014)sh245.606 333.557 mo(\000\020)sh250.326 333.557 mo(\000\011)sh252.507 333.557 mo(\000\017)sh255.903 333.557 mo(\000\013)sh260.95 333.557 mo(\000\003)sh265.093 333.557 mo(\000\014)sh267.897 333.557 mo(\000\031)sh273.411 333.557 mo(\0008)sh278.863 333.557 mo(\000&)sh283.926 333.557 mo(\000&)sh288.988 333.557 mo(\000\024)sh294.051 333.557 mo(\000\035)sh299.113 333.557 mo(\000\033)sh304.176 333.557 mo(\000\035)sh98.2661 340.006 mo
98.2661 363.434 li
@
[.996923 1.99385 ] 0 dsh
96.5489 351.72 mo
97.7677 351.72 li
.516472 .431495 .431495 .0754711 cmyk
@
[] 0 dsh
89.7923 351.72 mo
96.5489 351.72 li
.75021 .679683 .670222 .90164 cmyk
@
.269749 1 1 .319921 cmyk
GTMNCP+ArialMT [7.97538 0 0 -7.97538 0 0 ]msf89.7923 359.431 mo(\000\005)sh94.2161 359.431 mo(\000\007)sh[.996923 1.99385 ] 0 dsh
179.239 340.505 mo
cp
.516472 .431495 .431495 .0754711 cmyk
@
[] 0 dsh
98.7646 340.505 mo
179.239 340.505 li
.75021 .679683 .670222 .90164 cmyk
@
.516472 .431495 .431495 .0754711 cmyk
GTMNCQ+Verdana [6.97846 0 0 -6.97846 0 0 ]msf189.202 343.028 mo(\000\001)sh192.131 343.028 mo(\000\002)sh196.539 343.028 mo(\000\003)sh200.169 343.028 mo(\000\004)sh204.312 343.028 mo(\000\005)sh207.941 343.028 mo(\000\006)sh210.683 343.028 mo(\000\007)sh.75021 .679683 .670222 .90164 cmyk
GTMNCQ+Verdana [7.97538 0 0 -7.97538 0 0 ]msf225.092 343.527 mo(\000%)sh231.058 343.527 mo(\000\011)sh233.238 343.527 mo(\000\015)sh235.419 343.527 mo(\000\007)sh240.201 343.527 mo(\000\027)sh245.17 343.527 mo(\000\007)sh249.952 343.527 mo(\000\017)sh253.348 343.527 mo(\000\020)sh257.912 343.527 mo(\000\007)sh262.694 343.527 mo(\000\006)sh265.825 343.527 mo(\000\007)sh270.607 343.527 mo(\000\014)sh273.411 343.527 mo(\000\015)sh275.592 343.527 mo(\000\013)sh280.639 343.527 mo(\000#)sh285.608 343.527 mo(\000\004)sh290.359 343.527 mo(\000\002)sh295.406 343.527 mo(\000\003)sh299.549 343.527 mo(\000\014)sh302.353 343.527 mo(\000\016)sh307.4 343.527 mo(\000\012)sh312.229 343.527 mo(\000\002)sh317.276 343.527 mo(\000\004)sh322.027 343.527 mo(\000\))sh326.7 343.527 mo(\000!)sh331.669 343.527 mo(\000\004)sh336.42 343.527 mo(\0005)sh342.947 343.527 mo(\000\014)sh345.75 343.527 mo(\000\020)sh350.47 343.527 mo(\000\011)sh352.651 343.527 mo(\000\017)sh356.047 343.527 mo(\000\013)sh361.094 343.527 mo(\000\003)sh365.237 343.527 mo(\000\014)sh368.041 343.527 mo(\000\034)sh373.104 343.527 mo(\000\014)sh375.907 343.527 mo(\000\021)sh381.359 343.527 mo(\000\022)sh386.827 343.527 mo(\000\036)sh391.889 343.527 mo(\000\037)sh396.952 343.527 mo(\000\025)sh402.014 343.527 mo(\000\035)sh407.077 343.527 mo(\000\025)sh412.139 343.527 mo(\000\023)sh112.223 354.96 mo
112.223 370.911 li
@
[.996923 1.99385 ] 0 dsh
110.6 362.935 mo
111.725 362.935 li
.516472 .431495 .431495 .0754711 cmyk
@
[] 0 dsh
98.7646 362.935 mo
110.6 362.935 li
.75021 .679683 .670222 .90164 cmyk
@
.269749 1 1 .319921 cmyk
GTMNCP+ArialMT [7.97538 0 0 -7.97538 0 0 ]msf98.7646 370.646 mo(\000\001)sh103.188 370.646 mo(\000\002)sh107.612 370.646 mo(\000\002)sh156.593 349.975 mo
156.593 360.941 li
.75021 .679683 .670222 .90164 cmyk
@
[.996923 1.99385 ] 0 dsh
157.092 355.458 mo
156.095 355.458 li
.516472 .431495 .431495 .0754711 cmyk
@
[] 0 dsh
112.721 355.458 mo
157.092 355.458 li
.75021 .679683 .670222 .90164 cmyk
@
.269749 1 1 .319921 cmyk
GTMNCP+ArialMT [7.97538 0 0 -7.97538 0 0 ]msf143.135 363.169 mo(\000\001)sh147.558 363.169 mo(\000\002)sh151.982 363.169 mo(\000\002)sh[.996923 1.99385 ] 0 dsh
158.114 350.474 mo
cp
.516472 .431495 .431495 .0754711 cmyk
@
[] 0 dsh
157.092 350.474 mo
158.114 350.474 li
.75021 .679683 .670222 .90164 cmyk
@
.516472 .431495 .431495 .0754711 cmyk
GTMNCQ+Verdana [6.97846 0 0 -6.97846 0 0 ]msf189.202 352.997 mo(\000\021)sh193.969 352.997 mo(\000\017)sh196.82 352.997 mo(\000\007)sh201.01 352.997 mo(\000\005)sh204.639 352.997 mo(\000\016)sh209.047 352.997 mo(\000\002)sh213.456 352.997 mo(\000\011)sh215.356 352.997 mo(\000!)sh219.702 352.997 mo(\000\007)sh.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: KAAAAA+Verdana-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.ct_GlyphDirProcs begin/KAAAAA+Verdana 1 GetGlyphDirectory57 <001C60D8A8C9B65EB4060860F5270C18CADC937344178D49288340DD1F5D6A89E20047C964FB9CFB68> |!endend end
%ADOEndSubsetFont
GTMNCQ+Verdana [7.97538 0 0 -7.97538 0 0 ]msf225.092 353.496 mo(\0009)sh230.154 353.496 mo(\000\007)sh234.936 353.496 mo(\000\017)sh238.332 353.496 mo(\000\017)sh241.728 353.496 mo(\000\012)sh246.557 353.496 mo(\000\007)sh251.339 353.496 mo(\000\014)sh254.143 353.496 mo(\000!)sh259.112 353.496 mo(\000\004)sh263.863 353.496 mo(\000\003)sh268.006 353.496 mo(\000\006)sh271.137 353.496 mo(\000\017)sh274.533 353.496 mo(\000\013)sh279.58 353.496 mo(\000\005)sh283.723 353.496 mo(\000\006)sh286.854 353.496 mo(\000\012)sh291.683 353.496 mo(\000\017)sh295.079 353.496 mo(\000\014)sh297.883 353.496 mo(\000\020)sh302.602 353.496 mo(\000\011)sh304.783 353.496 mo(\000\017)sh308.179 353.496 mo(\000\013)sh313.226 353.496 mo(\000\003)sh317.369 353.496 mo(\000\014)sh320.173 353.496 mo(\000\030)sh325.236 353.496 mo(\000\014)sh328.039 353.496 mo(\000\021)sh333.18 353.496 mo(\0001)sh338.087 353.496 mo(\000\037)sh343.149 353.496 mo(\000\033)sh348.212 353.496 mo(\000\030)sh353.274 353.496 mo(\000\037)sh358.337 353.496 mo(\000\025)sh363.399 353.496 mo(\000\024)sh[.996923 1.99385 ] 0 dsh
158.52 360.443 mo
cp
.516472 .431495 .431495 .0754711 cmyk
@
[] 0 dsh
157.092 360.443 mo
158.52 360.443 li
.75021 .679683 .670222 .90164 cmyk
@
.516472 .431495 .431495 .0754711 cmyk
GTMNCQ+Verdana [6.97846 0 0 -6.97846 0 0 ]msf189.202 362.966 mo(\000\001)sh192.131 362.966 mo(\000\002)sh196.539 362.966 mo(\000\003)sh200.169 362.966 mo(\000\004)sh204.312 362.966 mo(\000\005)sh207.941 362.966 mo(\000\006)sh210.683 362.966 mo(\000\007)sh.75021 .679683 .670222 .90164 cmyk
GTMNCQ+Verdana [7.97538 0 0 -7.97538 0 0 ]msf225.092 363.465 mo(\0002)sh231.229 363.465 mo(\000\004)sh235.98 363.465 mo(\000\010)sh238.784 363.465 mo(\000\012)sh243.613 363.465 mo(\000\017)sh247.008 363.465 mo(\000-)sh254.766 363.465 mo(\000\004)sh259.517 363.465 mo(\000!)sh264.486 363.465 mo(\000\014)sh267.289 363.465 mo(\0005)sh273.816 363.465 mo(\000\011)sh275.997 363.465 mo(\000\002)sh281.044 363.465 mo(\000#)sh286.013 363.465 mo(\000\014)sh288.817 363.465 mo(\000\020)sh293.537 363.465 mo(\000\011)sh295.717 363.465 mo(\000\017)sh299.113 363.465 mo(\000\013)sh304.16 363.465 mo(\000\003)sh308.303 363.465 mo(\000\014)sh311.107 363.465 mo(\000\021)sh316.559 363.465 mo(\000$)sh320.173 363.465 mo(\000\035)sh325.236 363.465 mo(\000\036)sh330.298 363.465 mo(\000\024)sh335.361 363.465 mo(\000&)sh340.423 363.465 mo(\000\035)sh345.486 363.465 mo(\000\035)sh[.996923 1.99385 ] 0 dsh
165.191 370.412 mo
cp
.516472 .431495 .431495 .0754711 cmyk
@
[] 0 dsh
112.721 370.412 mo
165.191 370.412 li
.75021 .679683 .670222 .90164 cmyk
@
.516472 .431495 .431495 .0754711 cmyk
GTMNCQ+Verdana [6.97846 0 0 -6.97846 0 0 ]msf189.202 372.936 mo(\000\001)sh192.131 372.936 mo(\000\002)sh196.539 372.936 mo(\000\003)sh200.169 372.936 mo(\000\004)sh204.312 372.936 mo(\000\005)sh207.941 372.936 mo(\000\006)sh210.683 372.936 mo(\000\007)sh.75021 .679683 .670222 .90164 cmyk
GTMNCQ+Verdana [7.97538 0 0 -7.97538 0 0 ]msf225.092 373.434 mo(\000*)sh229.469 373.434 mo(\000\012)sh234.298 373.434 mo(\000\017)sh237.693 373.434 mo(\000-)sh245.451 373.434 mo(\000\011)sh247.631 373.434 mo(\000\005)sh251.775 373.434 mo(\000\007)sh256.557 373.434 mo(\000\014)sh259.361 373.434 mo(\000\004)sh264.112 373.434 mo(\000")sh268.832 373.434 mo(\000\003)sh272.975 373.434 mo(\000\004)sh277.726 373.434 mo(\000\005)sh281.869 373.434 mo(\000\006)sh285 373.434 mo(\000\007)sh289.783 373.434 mo(\000\014)sh292.586 373.434 mo(\000\020)sh297.306 373.434 mo(\000\011)sh299.487 373.434 mo(\000\017)sh302.883 373.434 mo(\000\013)sh307.93 373.434 mo(\000\003)sh312.073 373.434 mo(\000\014)sh314.877 373.434 mo(\000\037)sh319.939 373.434 mo(\000\014)sh322.743 373.434 mo(\000\031)sh328.258 373.434 mo(\000*)sh332.837 373.434 mo(\000\033)sh337.9 373.434 mo(\000\023)sh342.962 373.434 mo(\000\023)sh348.025 373.434 mo(\000\023)sh353.087 373.434 mo(\000\023)sh358.15 373.434 mo(\000\037)sh131.545 388.606 mo
131.545 420.757 li
@
[.996923 1.99385 ] 0 dsh
132.044 404.682 mo
131.047 404.682 li
.516472 .431495 .431495 .0754711 cmyk
@
[] 0 dsh
80.82 404.682 mo
132.044 404.682 li
.75021 .679683 .670222 .90164 cmyk
@
.269749 1 1 .319921 cmyk
GTMNCP+ArialMT [7.97538 0 0 -7.97538 0 0 ]msf118.087 412.392 mo(\000\001)sh122.511 412.392 mo(\000\002)sh126.934 412.392 mo(\000\002)sh140.518 379.883 mo
140.518 398.326 li
.75021 .679683 .670222 .90164 cmyk
@
[.996923 1.99385 ] 0 dsh
139.965 389.105 mo
140.019 389.105 li
.516472 .431495 .431495 .0754711 cmyk
@
[] 0 dsh
132.044 389.105 mo
139.965 389.105 li
.75021 .679683 .670222 .90164 cmyk
@
.269749 1 1 .319921 cmyk
GTMNCP+ArialMT [7.97538 0 0 -7.97538 0 0 ]msf132.044 396.815 mo(\000\006)sh136.468 396.815 mo(\000\006)sh[.996923 1.99385 ] 0 dsh
148.547 380.382 mo
cp
.516472 .431495 .431495 .0754711 cmyk
@
[] 0 dsh
141.016 380.382 mo
148.547 380.382 li
.75021 .679683 .670222 .90164 cmyk
@
.516472 .431495 .431495 .0754711 cmyk
GTMNCQ+Verdana [6.97846 0 0 -6.97846 0 0 ]msf189.202 382.905 mo(\000\001)sh192.131 382.905 mo(\000\002)sh196.539 382.905 mo(\000\003)sh200.169 382.905 mo(\000\004)sh204.312 382.905 mo(\000\005)sh207.941 382.905 mo(\000\006)sh210.683 382.905 mo(\000\007)sh.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: KAAAAA+Verdana-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.ct_GlyphDirProcs begin/KAAAAA+Verdana 1 GetGlyphDirectory58 <001C60D8A8C9B7D3A67AE1ECA4648CBC2CBCE179DC344C1E9261A7DFD8D6B5DA936CE3> |!endend end
%ADOEndSubsetFont
GTMNCQ+Verdana [7.97538 0 0 -7.97538 0 0 ]msf225.092 383.403 mo(\000:)sh229.998 383.403 mo(\000\016)sh235.045 383.403 mo(\000\007)sh239.827 383.403 mo(\000\013)sh244.874 383.403 mo(\000-)sh252.632 383.403 mo(\000\004)sh257.383 383.403 mo(\000\006)sh260.514 383.403 mo(\000\012)sh265.342 383.403 mo(\000\027)sh270.311 383.403 mo(\000\012)sh275.14 383.403 mo(\000\004)sh279.891 383.403 mo(\000\007)sh284.673 383.403 mo(\000\014)sh287.477 383.403 mo(\000\027)sh292.446 383.403 mo(\000\011)sh294.627 383.403 mo(\000\006)sh297.727 383.403 mo(\000\))sh302.369 383.403 mo(\000\012)sh307.198 383.403 mo(\000\005)sh311.341 383.403 mo(\000\007)sh316.123 383.403 mo(\000-)sh323.88 383.403 mo(\000\027)sh328.849 383.403 mo(\000\007)sh333.632 383.403 mo(\000\014)sh336.435 383.403 mo(\000\011)sh338.616 383.403 mo(\000\010)sh341.42 383.403 mo(\000\015)sh343.601 383.403 mo(\000\007)sh348.321 383.403 mo(\000\020)sh353.04 383.403 mo(\000\011)sh355.221 383.403 mo(\000\017)sh358.617 383.403 mo(\000\013)sh363.664 383.403 mo(\000\003)sh367.807 383.403 mo(\000\014)sh370.611 383.403 mo(\000\030)sh375.674 383.403 mo(\000\014)sh378.478 383.403 mo(\000\031)sh383.992 383.403 mo(\000\()sh388.789 383.403 mo(\000\037)sh393.852 383.403 mo(\000\030)sh398.914 383.403 mo(\000&)sh403.977 383.403 mo(\000\023)sh409.039 383.403 mo(\000\034)sh414.102 383.403 mo(\000\037)sh149.49 389.852 mo
149.49 405.803 li
@
[.996923 1.99385 ] 0 dsh
142.931 397.828 mo
148.991 397.828 li
.516472 .431495 .431495 .0754711 cmyk
@
[] 0 dsh
141.016 397.828 mo
142.931 397.828 li
.75021 .679683 .670222 .90164 cmyk
@
.269749 1 1 .319921 cmyk
%ADOBeginSubsetFont: JAAAAA+ArialMT-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.ct_GlyphDirProcs begin/JAAAAA+ArialMT 1 GetGlyphDirectory8 <001C60D8A8C9B790A8417CCC3DD602A832C6036EABF4F2D3E57112D93AA902DE37718844A058B50EB3F1B5E861098B47D5205F6EA7E1C971258CADEC93BF1BE593302A262FAE3AECE190C3C3D03578F2AAFFAA8618DECC167748BE6822D8DD0FCFD1128E42ACA2C0F187063D149CD53B357B27AC5540586482C65701E0AE3E58B7FFFF21ADCF92FEF03CA0A9294D015D90AB75CB8ED35D8614CCF9D44F5E73928E04E6FCF142675E1B307108E5F0990445D4979D32B917550F51EDDEF6C474AA04F630C52B463AB11F3C6562DF989A81632B38F4D3> |!endend end
%ADOEndSubsetFont
GTMNCP+ArialMT [7.97538 0 0 -7.97538 0 0 ]msf141.016 405.538 mo(\000\005)sh145.44 405.538 mo(\000\010)sh[.996923 1.99385 ] 0 dsh
159.662 390.351 mo
cp
.516472 .431495 .431495 .0754711 cmyk
@
[] 0 dsh
149.988 390.351 mo
159.662 390.351 li
.75021 .679683 .670222 .90164 cmyk
@
.516472 .431495 .431495 .0754711 cmyk
GTMNCQ+Verdana [6.97846 0 0 -6.97846 0 0 ]msf189.202 392.874 mo(\000\001)sh192.131 392.874 mo(\000\002)sh196.539 392.874 mo(\000\003)sh200.169 392.874 mo(\000\004)sh204.312 392.874 mo(\000\005)sh207.941 392.874 mo(\000\006)sh210.683 392.874 mo(\000\007)sh.75021 .679683 .670222 .90164 cmyk
GTMNCQ+Verdana [7.97538 0 0 -7.97538 0 0 ]msf225.092 393.373 mo(\000\021)sh230.544 393.373 mo(\000\002)sh235.59 393.373 mo(\000\006)sh238.721 393.373 mo(\000\016)sh243.768 393.373 mo(\000\004)sh248.519 393.373 mo(\000\017)sh251.775 393.373 mo(\000\007)sh256.557 393.373 mo(\000\004)sh261.308 393.373 mo(\000\007)sh266.09 393.373 mo(\000\014)sh268.894 393.373 mo(\000\027)sh273.863 393.373 mo(\000\004)sh278.614 393.373 mo(\000\017)sh282.01 393.373 mo(\000\002)sh286.979 393.373 mo(\000\))sh291.699 393.373 mo(\000\011)sh293.879 393.373 mo(\000\014)sh296.683 393.373 mo(\000\011)sh298.864 393.373 mo(\000\010)sh301.668 393.373 mo(\000\015)sh303.849 393.373 mo(\000\007)sh308.568 393.373 mo(\000\020)sh313.288 393.373 mo(\000\011)sh315.469 393.373 mo(\000\017)sh318.865 393.373 mo(\000\013)sh323.912 393.373 mo(\000\003)sh328.055 393.373 mo(\000\014)sh330.859 393.373 mo(\000\031)sh336.373 393.373 mo(\000*)sh340.953 393.373 mo(\000&)sh346.015 393.373 mo(\000\033)sh351.078 393.373 mo(\000\030)sh356.14 393.373 mo(\000\036)sh361.203 393.373 mo(\000\036)sh366.265 393.373 mo(\000\033)sh158.462 399.822 mo
158.462 410.788 li
@
[.996923 1.99385 ] 0 dsh
151.629 405.305 mo
157.964 405.305 li
.516472 .431495 .431495 .0754711 cmyk
@
[] 0 dsh
149.988 405.305 mo
151.629 405.305 li
.75021 .679683 .670222 .90164 cmyk
@
.269749 1 1 .319921 cmyk
%ADOBeginSubsetFont: JAAAAA+ArialMT-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.ct_GlyphDirProcs begin/JAAAAA+ArialMT 1 GetGlyphDirectory9 <001C60D8A8C9B790A84EDA0BA70FEBAAEA5DDE883A1D7AC45BA35E5F6CEAE9F714B6E583E624F36F3115F1455CC46CD2E630A8EA006F2D> |!endend end
%ADOEndSubsetFont
GTMNCP+ArialMT [7.97538 0 0 -7.97538 0 0 ]msf149.988 413.015 mo(\000\011)sh154.412 413.015 mo(\000\010)sh[.996923 1.99385 ] 0 dsh
167.501 400.32 mo
cp
.516472 .431495 .431495 .0754711 cmyk
@
[] 0 dsh
158.961 400.32 mo
167.501 400.32 li
.75021 .679683 .670222 .90164 cmyk
@
.516472 .431495 .431495 .0754711 cmyk
GTMNCQ+Verdana [6.97846 0 0 -6.97846 0 0 ]msf189.202 402.843 mo(\000\001)sh192.131 402.843 mo(\000\002)sh196.539 402.843 mo(\000\003)sh200.169 402.843 mo(\000\004)sh204.312 402.843 mo(\000\005)sh207.941 402.843 mo(\000\006)sh210.683 402.843 mo(\000\007)sh.75021 .679683 .670222 .90164 cmyk
GTMNCQ+Verdana [7.97538 0 0 -7.97538 0 0 ]msf225.092 403.342 mo(\000')sh229.095 403.342 mo(\000\))sh233.815 403.342 mo(\000-)sh241.572 403.342 mo(\000\007)sh246.354 403.342 mo(\000\002)sh251.401 403.342 mo(\000\006)sh254.532 403.342 mo(\000\017)sh257.928 403.342 mo(\000\011)sh260.109 403.342 mo(\000\007)sh264.891 403.342 mo(\000\014)sh267.694 403.342 mo(\000!)sh272.664 403.342 mo(\000\011)sh274.844 403.342 mo(\000\003)sh278.988 403.342 mo(\000\027)sh283.957 403.342 mo(\000\007)sh288.739 403.342 mo(\000\017)sh292.135 403.342 mo(\000\014)sh294.939 403.342 mo(\000\011)sh297.119 403.342 mo(\000\010)sh299.923 403.342 mo(\000\015)sh302.104 403.342 mo(\000\007)sh306.824 403.342 mo(\000\020)sh311.544 403.342 mo(\000\011)sh313.724 403.342 mo(\000\017)sh317.12 403.342 mo(\000\013)sh322.167 403.342 mo(\000\003)sh326.31 403.342 mo(\000\014)sh329.114 403.342 mo(\000\030)sh334.177 403.342 mo(\000\014)sh336.981 403.342 mo(\000\031)sh342.495 403.342 mo(\000$)sh346.109 403.342 mo(\000\025)sh351.171 403.342 mo(\000\037)sh356.234 403.342 mo(\000\024)sh361.296 403.342 mo(\000\030)sh366.359 403.342 mo(\000&)sh371.421 403.342 mo(\000\023)sh[.996923 1.99385 ] 0 dsh
167.344 410.289 mo
cp
.516472 .431495 .431495 .0754711 cmyk
@
[] 0 dsh
158.961 410.289 mo
167.344 410.289 li
.75021 .679683 .670222 .90164 cmyk
@
.516472 .431495 .431495 .0754711 cmyk
GTMNCQ+Verdana [6.97846 0 0 -6.97846 0 0 ]msf189.202 412.813 mo(\000\001)sh192.131 412.813 mo(\000\002)sh196.539 412.813 mo(\000\003)sh200.169 412.813 mo(\000\004)sh204.312 412.813 mo(\000\005)sh207.941 412.813 mo(\000\006)sh210.683 412.813 mo(\000\007)sh.75021 .679683 .670222 .90164 cmyk
GTMNCQ+Verdana [7.97538 0 0 -7.97538 0 0 ]msf225.092 413.311 mo(\000\022)sh230.559 413.311 mo(\000\012)sh235.388 413.311 mo(\000-)sh243.145 413.311 mo(\000+)sh248.083 413.311 mo(\000\))sh252.803 413.311 mo(\000")sh257.523 413.311 mo(\000\014)sh260.327 413.311 mo(\000-)sh268.084 413.311 mo(\000\012)sh272.913 413.311 mo(\000\017)sh276.309 413.311 mo(\000\011)sh278.489 413.311 mo(\000\014)sh281.293 413.311 mo(\000\011)sh283.474 413.311 mo(\000\010)sh286.278 413.311 mo(\000\015)sh288.458 413.311 mo(\000\007)sh293.178 413.311 mo(\000\020)sh297.898 413.311 mo(\000\011)sh300.079 413.311 mo(\000\017)sh303.475 413.311 mo(\000\013)sh308.522 413.311 mo(\000\003)sh312.665 413.311 mo(\000\014)sh315.469 413.311 mo(\000')sh319.83 413.311 mo(\0003)sh325.391 413.311 mo(\000\023)sh330.454 413.311 mo(\000\025)sh335.516 413.311 mo(\000\036)sh340.579 413.311 mo(\000&)sh345.641 413.311 mo(\000\025)sh350.704 413.311 mo(\000\037)sh[.996923 1.99385 ] 0 dsh
142.636 420.258 mo
cp
.516472 .431495 .431495 .0754711 cmyk
@
[] 0 dsh
132.044 420.258 mo
142.636 420.258 li
.75021 .679683 .670222 .90164 cmyk
@
.516472 .431495 .431495 .0754711 cmyk
GTMNCQ+Verdana [6.97846 0 0 -6.97846 0 0 ]msf189.202 422.782 mo(\000\001)sh192.131 422.782 mo(\000\002)sh196.539 422.782 mo(\000\003)sh200.169 422.782 mo(\000\004)sh204.312 422.782 mo(\000\005)sh207.941 422.782 mo(\000\006)sh210.683 422.782 mo(\000\007)sh.75021 .679683 .670222 .90164 cmyk
GTMNCQ+Verdana [7.97538 0 0 -7.97538 0 0 ]msf225.092 423.28 mo(\000,)sh231.073 423.28 mo(\000\004)sh235.824 423.28 mo(\000\015)sh238.005 423.28 mo(\000\011)sh240.186 423.28 mo(\000\005)sh244.329 423.28 mo(\000\012)sh249.158 423.28 mo(\000\002)sh254.205 423.28 mo(\000\011)sh256.386 423.28 mo(\000\013)sh261.433 423.28 mo(\000\003)sh265.576 423.28 mo(\000\014)sh268.38 423.28 mo(\000\004)sh273.131 423.28 mo(\000\017)sh276.386 423.28 mo(\000\007)sh281.169 423.28 mo(\000\006)sh284.299 423.28 mo(\000\012)sh289.128 423.28 mo(\000\014)sh291.932 423.28 mo(\000\011)sh294.113 423.28 mo(\000\010)sh296.917 423.28 mo(\000\015)sh299.098 423.28 mo(\000\007)sh303.817 423.28 mo(\000\020)sh308.537 423.28 mo(\000\011)sh310.718 423.28 mo(\000\017)sh314.114 423.28 mo(\000\013)sh319.161 423.28 mo(\000\003)sh323.304 423.28 mo(\000\014)sh326.108 423.28 mo(\000\031)sh331.622 423.28 mo(\000$)sh335.236 423.28 mo(\000\025)sh340.299 423.28 mo(\000&)sh345.361 423.28 mo(\000\024)sh350.424 423.28 mo(\000\035)sh355.486 423.28 mo(\000\034)sh360.549 423.28 mo(\000\036)sh2 lc
.996923 431.225 mo
47.8377 431.225 li
@
.996923 426.24 mo
.996923 436.209 li
@
47.8377 426.24 mo
47.8377 436.209 li
@
%ADOBeginSubsetFont: SAAAAA+Helvetica-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.%%DocumentNeededResources: ProcSet (CIDInit)%%IncludeResource: ProcSet (CIDInit)%%BeginResource: CIDFont (SAAAAA+Helvetica)%%Title: (SAAAAA+Helvetica Adobe Identity 0)%%Version: 0/CIDInit /ProcSet findresource begin14 dict begin/CIDFontName /SAAAAA+Helvetica def/CIDFontType 0 def/CIDSystemInfo 3 dict dup begin/Registry (Adobe) def/Ordering (Identity) def/Supplement 0 defend def/FontBBox {31 -20 602 717} def/FontInfo 4 dict dup begin/FSType 0 defend def/CIDMapOffset 57 def/FDBytes 1 def/GDBytes 1 def/CIDCount 4 def/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def/FDArray 1 arraydup 0%ADOBeginFontDict4 dict dup begin/FontType 1 def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def%ADOBeginPrivateDict/Private 7 dict dup begin/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/SubrMapOffset 0 def/SDBytes 1 def/SubrCount 5 defend def%ADOEndPrivateDictend put%ADOEndFontDictdef/GlyphDirectory 4 dict defct_GlyphDirProcs beginGlyphDirectory+0 <001C60D8A8C9B66C0E6DEA9DE3486CC02B6E7AE05C061D1EB2159D4B2008A0246DA610CD> |1 <001C60D8A8C9B790A87F8ED3492463263BBC0CEA03217A9364A444AC3903C64DA43810BEAD48627D079D19C60A55542F6C8D606675FC43A767498D73538D9ED21EFB6CB4FE5EBAB928785111A9B660D35200AD1A40E97D65FFB2BCAB3BD781A0C219D13B57A0F8723B397C205D28B1F8946986A663AAC8BBC32F26A85DB7524B018DFE9B82> |2 <001C60D8A8C9B854D0E3687FB65E4AA50D89B0> |3 <001C60D8A8C9B790A81C55F1A71F762CDDBB74EE3AB6FF312ACCAB6BA13B3D69342E0D0921CC7FF9A468E514E963691D99F5B178A234B0F3EE02879913DB5B3FFE684D963EB4F6F5D70C03442B76BEB7C22E0D204C1615747003A0EABB48570E11009358A601C018F03DE537A858CEDC4F35FE99507529F93C4C77D5C555F95976878A428342687C3E7EE8B5592E7147BA50> |!endct_AddStdCIDMap%%EndResourcect_restoreCIDInit /SAAAAA+Helvetica-Identity-H /Identity-H 0 [/SAAAAA+Helvetica] ct_ComposeFont pop end end
%ADOEndSubsetFont
/GTMNCR+Helvetica /SAAAAA+Helvetica-Identity-H findfont ct_VMDictPutGTMNCR+Helvetica [12.96 0 0 -12.96 0 0 ]msf.996923 446.178 mo(\000\001)sh8.19346 446.178 mo(\000\002)sh11.7917 446.178 mo(\000\003)shgrestore
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/GTMNCP+ArialMT-Identity-H uf/GTMNCP+ArialMT /CIDFont ur/GTMNCR+Helvetica-Identity-H uf/GTMNCR+Helvetica /CIDFont ur/GTMNCQ+Verdana-Identity-H uf/GTMNCQ+Verdana /CIDFont urAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
